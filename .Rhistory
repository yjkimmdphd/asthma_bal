nSamples = nrow(expression.data)
module.trait.correlation = cor(mergedMEs, datTraits, use = "p") #p for pearson correlation coefficient
module.trait.Pvalue = corPvalueStudent(module.trait.correlation, nSamples) #calculate the p-value associated with the correlation
# Will display correlations and their p-values
textMatrix = paste(signif(module.trait.correlation, 2), "\n(",
signif(module.trait.Pvalue, 1), ")", sep = "");
dim(textMatrix) = dim(module.trait.correlation)
par(mar = c(6, 6, 3, 1))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Define variable weight containing the weight column of datTrait
phen_of_interest<-as.data.frame(datTraits$comp2)
modNames = substring(names(mergedMEs), 3) #extract module names
#Calculate the module membership and the associated p-values
geneModuleMembership = as.data.frame(WGCNA::cor(expression.data, mergedMEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
#Calculate the gene significance and associated p-values
geneTraitSignificance = as.data.frame(WGCNA::cor(expression.data, phen_of_interest, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) = paste("GS.", names(phen_of_interest), sep="")
names(GSPvalue) = paste("p.GS.", names(phen_of_interest), sep="")
head(GSPvalue)
# scatter plot of gene significance vs. module membership in all the module
par(mar = c(4,4,4,4),mfrow=c(6,4))
for(mod in modNames){
module = mod
column = match(module, modNames)
moduleGenes = mergedColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes,column]),
abs(geneTraitSignificance[moduleGenes,1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for eos mt1",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
GSPvalue
head(MMPvalue)
head(geneTraitSignificance)
# Define variable weight containing the weight column of datTrait
phen_of_interest<-as.data.frame(datTraits$comp2)
modNames = substring(names(mergedMEs), 3) #extract module names
#Calculate the module membership and the associated p-values
geneModuleMembership = as.data.frame(WGCNA::cor(expression.data, mergedMEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
#Calculate the gene significance and associated p-values
geneTraitSignificance = as.data.frame(WGCNA::cor(expression.data, phen_of_interest, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) = paste("GS.", names(phen_of_interest), sep="")
names(GSPvalue) = paste("p.GS.", names(phen_of_interest), sep="")
head(GSPvalue)
# scatter plot of gene significance vs. module membership in all the module
par(mar = c(4,4,4,4),mfrow=c(6,4))
for(mod in modNames){
module = mod
column = match(module, modNames)
moduleGenes = mergedColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes,column]),
abs(geneTraitSignificance[moduleGenes,1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for eos mt1",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
chooseTopHubInEachModule(expression.data, moduleColors, power = 4)
mergedColors
mergedMEs
datTraits
expression.data
?chooseTopHubInEachModule
mergedColors
dim(mergedColors)
length(mergedColors)
dim(expression.data)
chooseTopHubInEachModule(expression.data, mergedColors, power = 4)
HubGenes <- chooseTopHubInEachModule(expression.data, mergedColors, power = 4)
HubGenes
HubGenes <- chooseTopHubInEachModule(expression.data, mergedColors, power = 4, type= "signed")
HubGenes
?intramodularConnectivity.fromExpr
connectivity_allClusters <- intramodularConnectivity( adjacency(expression.data, power = 4), mergedColors, scaleByMax = FALSE)
connectivity_allClusters
colnames(expression.data)%>%head
merge$colors
ME.dissimilarity
METree
summary(METree)
METree$labels
METree$order
METree$dist.method
plot(METree)
mergedMEs
datTraits
mergedMEs
geneModuleMembership
m_gene_list
gene.module.table
data.frame(genes=colnames(expression.data),modules=mergedColors)
gene.module.table<-data.frame(genes=colnames(expression.data),modules=mergedColors)
# Assuming list_of_dfs is your list of dataframes
list_of_dfs <- split(gene.module.table, gene.module.table$module)
genelist<-vector("list",length=length(list_of_dfs))
names(genelist)<-names(list_of_dfs)
for(i in 1:length(list_of_dfs)){
genelist[[i]]<-list_of_dfs[[i]]$genes
}
genelist
connectivity_allClusters
gene.module.table
# Check if rownames(connectivity_allClusters) match gene.module.table$genes
matched <- match(rownames(connectivity_allClusters), gene.module.table$genes)
matched
# Update connectivity_allClusters$module with the corresponding module values
connectivity_allClusters$module <- gene.module.table$modules[matched]
connectivity_allClusters
df_genelist
gene.module.table<-data.frame(genes=colnames(expression.data),modules=mergedColors)
# Assuming list_of_dfs is your list of dataframes
list_of_dfs <- split(gene.module.table, gene.module.table$module)
genelist<-vector("list",length=length(list_of_dfs))
names(genelist)<-names(list_of_dfs)
for(i in 1:length(list_of_dfs)){
genelist[[i]]<-list_of_dfs[[i]]$genes
}
# Finding the maximum length of vectors in the list
max_length <- max(sapply(genelist, length))
# Padding shorter vectors with NA
genelist_padded <- lapply(genelist, function(x) {
length(x) <- max_length  # Setting the length of each vector to the maximum
x
})
# Convert the list to a data frame
df_genelist <- as.data.frame(genelist_padded)
df_genelist
modNames = substring(names(mergedMEs), 3) #extract module names
#Calculate the module membership and the associated p-values
geneModuleMembership = as.data.frame(WGCNA::cor(expression.data, mergedMEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
geneModuleMembership
mergedMEs
Modules
moduleGenes
geneModuleMembership[moduleGenes,column]
connectivity_allClusters
?intramodularConnectivity
str(connectivity_allClusters)
connectivity_allClusters$gene <- gene.module.table$genes[matched]
connectivity_allClusters
str(connectivity_allClusters)
top_kWithin_by_module <- connectivity_allClusters %>%
group_by(module) %>%
slice_max(order_by = kWithin, n = 20) %>%
ungroup() %>%
arrange(module, desc(kWithin))
head(top_kWithin_by_module)
view(top_kWithin_by_module)
geneModuleMembership
WGCNA::cor(expression.data, mergedMEs, use = "p")
connectivity_allClusters
top_kWithin_by_module
str(top_kWithin_by_module)
deg
str(top_kWithin_by_module)
deg_folder<-file.path("./reports/local_only/deg_bal_bronch~cell2025-01-03")
deg_file<-if(file.exists(deg_folder)){list.files(deg_folder)[grep(".csv",list.files(deg_folder))]}else{print("folder doesn't exist")}
deg<-read.csv(file.path(deg_folder,"deg_bronch_res_sig_16_~ bal_Eos_p_more_1 + Batch_2025-01-03_.csv"), row.names = 1)
all_assessed_genes<-read.csv(file.path(deg_folder,"deg_bronch_res_all_16_~ bal_Eos_p_more_1 + Batch_2025-01-03_.csv"), row.names = 1)%>%rownames
deg_folder<-file.path("./reports/local_only/deg_bal_bronch~cell2025-01-03")
deg_file<-if(file.exists(deg_folder)){list.files(deg_folder)[grep(".csv",list.files(deg_folder))]}else{print("folder doesn't exist")}
deg<-read.csv(file.path(deg_folder,"deg_bronch_res_sig_16_~ bal_Eos_p_more_1 + Batch_2025-01-03_.csv"), row.names = 1)
all_assessed_genes<-read.csv(file.path(deg_folder,"deg_bronch_res_all_16_~ bal_Eos_p_more_1 + Batch_2025-01-03_.csv"), row.names = 1)%>%rownames
deg_abs_lfc<-deg%>%filter(abs(log2FoldChange)>1)%>%rownames
deg_abs_lfc
df_assessed_only <- top_kWithin_by_module %>%
filter(gene %in% deg_abs_lfc)
head(df_assessed_only)
view(df_assessed_only)
# quantify the association between the expression profile and a particular trait of interest
# by calculating the correlation of the trait with previously identified module eigengenes.
# This pairwise correlation is known as the eigengene gene significance
expression.data<-expression.data[rownames(expression.data)%in%rownames(datTraits),]
mergedMEs<-mergedMEs[rownames(mergedMEs)%in%rownames(datTraits),]
nSamples = nrow(expression.data)
module.trait.correlation = cor(mergedMEs, datTraits, use = "p") #p for pearson correlation coefficient
module.trait.Pvalue = corPvalueStudent(module.trait.correlation, nSamples) #calculate the p-value associated with the correlation
# Will display correlations and their p-values
textMatrix = paste(signif(module.trait.correlation, 2), "\n(",
signif(module.trait.Pvalue, 1), ")", sep = "");
dim(textMatrix) = dim(module.trait.correlation)
par(mar = c(6, 6, 3, 1))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# quantify the association between the expression profile and a particular trait of interest
# by calculating the correlation of the trait with previously identified module eigengenes.
# This pairwise correlation is known as the eigengene gene significance
expression.data<-expression.data[rownames(expression.data)%in%rownames(datTraits),]
mergedMEs<-mergedMEs[rownames(mergedMEs)%in%rownames(datTraits),]
nSamples = nrow(expression.data)
module.trait.correlation = cor(mergedMEs, datTraits, use = "p") #p for pearson correlation coefficient
module.trait.Pvalue = corPvalueStudent(module.trait.correlation, nSamples) #calculate the p-value associated with the correlation
# Will display correlations and their p-values
textMatrix = paste(signif(module.trait.correlation, 2), "\n(",
signif(module.trait.Pvalue, 1), ")", sep = "");
dim(textMatrix) = dim(module.trait.correlation)
par(mar = c(6, 6, 3, 1))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
phen_path <- file.path(
"./resources/processed_data",
"scaled_phenotype_studyID_asthmaPhenotype_batch_cellCount_2024-12-26.csv"
)
phen <- read.csv(phen_path)
phen<-phen %>% filter(BAL_eos_p >= 0 & BAL_neut_p >= 0) %>%
mutate(comp1_pnme = factor(case_when(BAL_eos_p > 1 & BAL_neut_p > 4 ~ 2, # "mixed"
BAL_eos_p > 1 & BAL_neut_p <= 4 ~ 3, # "eos"
BAL_eos_p <= 1 & BAL_neut_p > 4 ~ 1, # "neut"
BAL_eos_p <= 1 & BAL_neut_p <= 4 ~ 0), # "pauci"
levels = c(0, 1, 2, 3)),
comp2_eos_p_mt1 = factor(case_when(BAL_eos_p > 1 ~ 1 , #"high_eos"
BAL_eos_p <= 1 ~ 0 ),# "low_eos"
levels = c(0,1)))
phen$Batch<-factor(phen$Batch,levels=unique(phen$Batch))
phen_bronch<-phen[grepl("^B",phen$SampleID),]
phen_nasal<-phen[grepl("^N",phen$SampleID),]
phen_nasal<-phen_nasal[-grep("F", phen_nasal$SampleID),]
phen_input<-phen_bronch
phen_input$SampleID <- gsub("-", ".", phen_input$SampleID)
alltraits<-phen_input[phen_input$SampleID%in%rownames(mergedMEs),]
rownames(alltraits)<-alltraits$SampleID
source.cell.log<-c(
"BAL_eos_ct_log",
"BAL_eos_p_log",
"BAL_neut_ct_log",
"BAL_neut_p_log",
"BAL_wbc_log",
"blood_eos_log",
"blood_eos_p_log",
"blood_neut_log",
"blood_neut_p_log",
"blood_wbc_log")
alltraits<-alltraits[,c("asthma_phen_ACT.score",source.cell.log, "comp1_pnme","comp2_eos_p_mt1")] # only select cell counts in the phenotype data
good<-!(sapply(alltraits,is.na)%>%rowSums()>0) # remove rows with at least one NA
datTraits<-alltraits[good,]
# quantify the association between the expression profile and a particular trait of interest
# by calculating the correlation of the trait with previously identified module eigengenes.
# This pairwise correlation is known as the eigengene gene significance
expression.data<-expression.data[rownames(expression.data)%in%rownames(datTraits),]
mergedMEs<-mergedMEs[rownames(mergedMEs)%in%rownames(datTraits),]
nSamples = nrow(expression.data)
module.trait.correlation = cor(mergedMEs, datTraits, use = "p") #p for pearson correlation coefficient
module.trait.Pvalue = corPvalueStudent(module.trait.correlation, nSamples) #calculate the p-value associated with the correlation
# Will display correlations and their p-values
textMatrix = paste(signif(module.trait.correlation, 2), "\n(",
signif(module.trait.Pvalue, 1), ")", sep = "");
dim(textMatrix) = dim(module.trait.correlation)
par(mar = c(6, 6, 3, 1))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait relationships"))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.4,
zlim = c(-1,1),
main = paste("Module-trait correlation"))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 1,
zlim = c(-1,1),
main = paste("Module-trait correlation"))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = module.trait.correlation,
xLabels = names(datTraits),
yLabels = names(mergedMEs),
ySymbols = names(mergedMEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.6,
zlim = c(-1,1),
main = paste("Module-trait correlation"))
# Whole Network connectivity - a measure for how well the node is connected throughout the entire system
# Intramodular connectivity - a measure for how well the node is connected within its assigned module. Also an indicator for how well that node belongs to its module. This is also known as module membership.
modNames = substring(names(mergedMEs), 3) #extract module names
#Calculate the module membership and the associated p-values
geneModuleMembership = as.data.frame(WGCNA::cor(expression.data, mergedMEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")
# ----------------
# for log(BAL Eos %)
# ----------------
# Define variable weight containing the weight column of datTrait
BAL_eos_p_log = as.data.frame(datTraits$BAL_eos_p_log)
names(BAL_eos_p_log) = "BAL_eos_p_log"
phen_of_interest<-BAL_eos_p_log
#Calculate the gene significance and associated p-values
geneTraitSignificance = as.data.frame(WGCNA::cor(expression.data, phen_of_interest, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
names(geneTraitSignificance) = paste("GS.", names(phen_of_interest), sep="")
names(GSPvalue) = paste("p.GS.", names(phen_of_interest), sep="")
head(GSPvalue)
# scatter plot of gene significance vs. module membership in all the module
par(mfrow=c(6,4))
for(mod in modNames){
module = mod
column = match(module, modNames)
moduleGenes = mergedColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes,column]),
abs(geneTraitSignificance[moduleGenes,1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for eos",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
# Isolate blood_eos_log from the clinical traits
bal_mix=as.data.frame(datTraits$comp1_pnme);
bal_eos_mt1=as.data.frame(datTraits$comp2_eos_p_mt1);
BAL_eos_ct_log = as.data.frame(datTraits$BAL_eos_ct_log);
BAL_neut_ct_log = as.data.frame(datTraits$BAL_neut_ct_log)
BAL_eos_p_log = as.data.frame(datTraits$BAL_eos_p_log);
BAL_neut_p_log = as.data.frame(datTraits$BAL_neut_p_log)
names(bal_mix) = "mixed_cell"
names(bal_eos_mt1) = "eos_mt1"
names(BAL_eos_ct_log) = "BAL_eos_ct_log"
names(BAL_neut_ct_log) = "BAL_neut_ct_log"
names(BAL_eos_p_log) = "BAL_eos_p_log"
names(BAL_neut_p_log) = "BAL_neut_p_log"
# Add the BAL_eos_ct_log to existing module eigengenes
mergedMEs<-mergedMEs[rownames(mergedMEs)%in%rownames(datTraits),]
MET = orderMEs(cbind(mergedMEs, bal_mix, bal_eos_mt1, BAL_eos_ct_log, BAL_neut_ct_log, BAL_eos_p_log, BAL_neut_p_log ))
# Plot the relationships among the eigengenes and the trait
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(5,4,1,2), cex.lab = 0.8, xLabelsAngle
= 90)
# Plot the dendrogram
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene dendrogram", marDendro = c(0,4,2,0),
plotHeatmaps = FALSE)
# Plot the heatmap matrix (note: this plot will overwrite the dendrogram plot)
par(cex = 1.0, mar = c(1,1,1,1))
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(5,5,2,2),
plotDendrograms = FALSE, xLabelsAngle = 90)
bal_mix
mergedMEs
?moduleEigengenes
# Add the BAL_eos_ct_log to existing module eigengenes
mergedMEs<-mergedMEs[rownames(mergedMEs)%in%rownames(datTraits),]
MET = orderMEs(cbind(mergedMEs, bal_mix, bal_eos_mt1, BAL_eos_ct_log, BAL_neut_ct_log, BAL_eos_p_log, BAL_neut_p_log ))
# Plot the relationships among the eigengenes and the trait
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(5,4,1,2), cex.lab = 0.8, xLabelsAngle
= 90)
# Plot the dendrogram
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene dendrogram", marDendro = c(0,4,2,0),
plotHeatmaps = FALSE)
# Plot the heatmap matrix (note: this plot will overwrite the dendrogram plot)
par(cex = 1.0, mar = c(1,1,1,1))
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(5,5,2,2),
plotDendrograms = FALSE, xLabelsAngle = 90)
MET = orderMEs(cbind(mergedMEs, bal_mix, bal_eos_mt1,BAL_eos_p_log, BAL_neut_p_log ))
# Plot the relationships among the eigengenes and the trait
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(5,4,1,2), cex.lab = 0.8, xLabelsAngle
= 90)
# Plot the dendrogram
par(cex = 1.0)
plotEigengeneNetworks(MET, "Eigengene dendrogram", marDendro = c(0,4,2,0),
plotHeatmaps = FALSE)
# Plot the heatmap matrix (note: this plot will overwrite the dendrogram plot)
par(cex = 1.0, mar = c(1,1,1,1))
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(5,5,2,2),
plotDendrograms = FALSE, xLabelsAngle = 90)
plotEigengeneNetworks(MET, "Eigengene adjacency heatmap", marHeatmap = c(10,10,2,2),
plotDendrograms = FALSE, xLabelsAngle = 90)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(5,4,1,2), cex.lab = 0.8, xLabelsAngle
= 90)
?orderMEs
###
# 11. find genes in each module that has high correlation and low p-val in gene significance vs. module membership
###
gene.module.table<-data.frame(genes=colnames(expression.data),modules=mergedColors)
# Assuming list_of_dfs is your list of dataframes
list_of_dfs <- split(gene.module.table, gene.module.table$module)
genelist<-vector("list",length=length(list_of_dfs))
names(genelist)<-names(list_of_dfs)
for(i in 1:length(list_of_dfs)){
genelist[[i]]<-list_of_dfs[[i]]$genes
}
# Finding the maximum length of vectors in the list
max_length <- max(sapply(genelist, length))
# Padding shorter vectors with NA
genelist_padded <- lapply(genelist, function(x) {
length(x) <- max_length  # Setting the length of each vector to the maximum
x
})
# Convert the list to a data frame
df_genelist <- as.data.frame(genelist_padded)
df_genelist
# ----------------
# Bronchial DEG for BAL Eos % > 1% vs <=1%
# ----------------
deg_folder<-file.path("./reports/local_only/deg_bal_bronch~cell2025-01-03")
deg_file<-if(file.exists(deg_folder)){list.files(deg_folder)[grep(".csv",list.files(deg_folder))]}else{print("folder doesn't exist")}
deg<-read.csv(file.path(deg_folder,"deg_bronch_res_sig_16_~ bal_Eos_p_more_1 + Batch_2025-01-03_.csv"), row.names = 1)
all_assessed_genes<-read.csv(file.path(deg_folder,"deg_bronch_res_all_16_~ bal_Eos_p_more_1 + Batch_2025-01-03_.csv"), row.names = 1)%>%rownames
deg_abs_lfc<-deg%>%filter(abs(log2FoldChange)>1)%>%rownames
module_list<-list.files(wgcna_folder)[grep(".txt",list.files(wgcna_folder))]
modules_files<-file.path(wgcna_folder,module_list)
m_gene_list<-lapply(modules_files,read.table)
names(m_gene_list)<-sub("batch12346.txt","",module_list)
overlap_proportion <- sapply(m_gene_list, function(x) {
mean(unlist(x) %in% deg_abs_lfc)
})# no notable overlap between bronch down gene with WGCNA module genes
print(overlap_proportion)
mean(unlist(x) %in% deg_abs_lfc,round=2)
overlap_proportion <- sapply(m_gene_list, function(x) {
mean(unlist(x) %in% deg_abs_lfc,round=2)
})# no notable overlap between bronch down gene with WGCNA module genes
print(overlap_proportion)
?mean
?mean
?round
overlap_proportion <- sapply(m_gene_list, function(x) {
round(mean(unlist(x) %in% deg_abs_lfc),2)
})# no notable overlap between bronch down gene with WGCNA module genes
print(overlap_proportion)
# scatter plot of gene significance vs. module membership in all the module
par(mar = c(4,4,4,4),mfrow=c(6,4))
for(mod in modNames){
module = mod
column = match(module, modNames)
moduleGenes = mergedColors==module
verboseScatterplot(abs(geneModuleMembership[moduleGenes,column]),
abs(geneTraitSignificance[moduleGenes,1]),
xlab = paste("Module Membership in", module, "module"),
ylab = "Gene significance for eos mt1",
main = paste("Module membership vs. gene significance\n"),
cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)
}
mergedColors
# Choose a module of interest (e.g., "ivory")
module = "ivory"
genesInModule = mergedColors == module
moduleGenes = rownames(expression.data)[genesInModule]
head(adjacency())
head(adjacency
)
adjacency <- adjacency(expression.data, power = softPower)
# Adjacency matrix
softPower <- 4
adjacency <- adjacency(expression.data, power = softPower)
head(adjacency)
