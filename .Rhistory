scale = "row",  # Scale rows (genes)
key = TRUE,      # Display the color key (legend)
key.title = "Expression Level",  # Title for the legend
key.xlab = "Color Scale",          # X-axis label for the legend
keysize = 0.7,  # Adjust this value for a more compact key
main = "Gene Expression Heatmap of genes upregulated in \nnasal_gene~blood_Eos and bronch_gene~BAL_neut",# heat map title
RowSideColors = deg_nb_reordered$type_col,
ColSideColors = ifelse(phen_sub$rna_sample=="nasal","#E66100","#5D3A9B"))
?heatmap.2
hcut_level<-60
gene_cluster<-cutree(hclust_result, h = hcut_level)
# sample_cluster<-cutree(hclust_result_sample, h = 120) # if planning to cluster the samples too
# Subset the gene expression matrix based on the cut clusters
cluster_order<-order(gene_cluster)
# sample_cluster_order<-order(sample_cluster) # if planning to cluster the samples too
lcpm_hclust <- lcpm[cluster_order, ] # use this 'sample_cluster_order]' if hclust col and rows ordered by custom cutoff h value
# 2.2 compare lcpm_gene_names with deg gene names. reorder gene names in deg so that their order of gene names match that of lcpm_gene_names
# Find the order of genes in lcpm within deg
lcpm_gene_names<-rownames(lcpm_hclust)
order_genelist1 <- match(lcpm_gene_names, deg_nb$X)
# Reorder genelist2 based on the order of genes in genelist1
deg_nb_reordered <- deg_nb[order_genelist1,]
# reorder col/samples based on blood Eos counts
new_sample_order<-match(phen_sub$SampleID,exist_samples)
new_lcpm_hclust<-lcpm_hclust[,new_sample_order]
head(new_lcpm_hclust)
head(phen_sub$SampleID)
# custom color palette for gene
my_palette <- colorRampPalette(c("#7122F5","#FEFE62"))(n = 50) # custom heatmap pallette
heatmap.2(new_lcpm_hclust,
col = my_palette,
trace = "none",  # Do not show row/column labels
Rowv=order_genelist1,
scale = "row",  # Scale rows (genes)
key = TRUE,      # Display the color key (legend)
key.title = "Expression Level",  # Title for the legend
key.xlab = "Color Scale",          # X-axis label for the legend
keysize = 0.7,  # Adjust this value for a more compact key
main = "Gene Expression Heatmap of genes upregulated in \nnasal_gene~blood_Eos and bronch_gene~BAL_neut",# heat map title
RowSideColors = deg_nb_reordered$type_col,
ColSideColors = ifelse(phen_sub$rna_sample=="nasal","#E66100","#5D3A9B"))
heatmap.2(new_lcpm_hclust,
col = my_palette,
trace = "none",  # Do not show row/column labels
Rowv=order_genelist1,
scale = "row",  # Scale rows (genes)
key = TRUE,      # Display the color key (legend)
key.title = "Expression Level",  # Title for the legend
key.xlab = "Color Scale",          # X-axis label for the legend
keysize = 0.7,  # Adjust this value for a more compact key
main = "Gene Expression Heatmap of genes upregulated in \nnasal_gene~blood_Eos and bronch_gene~BAL_neut",# heat map title
RowSideColors = deg_nb_reordered$type_col,
ColSideColors = ifelse(phen_sub$rna_sample=="nasal","#E66100","#5D3A9B"))
phen_sub$rna_sample
phen_sub
new_sample_order
heatmap.2(new_lcpm_hclust,
col = my_palette,
trace = "none",  # Do not show row/column labels
Rowv=order_genelist1,
Colv = new_sample_order,
scale = "row",  # Scale rows (genes)
key = TRUE,      # Display the color key (legend)
key.title = "Expression Level",  # Title for the legend
key.xlab = "Color Scale",          # X-axis label for the legend
keysize = 0.7,  # Adjust this value for a more compact key
main = "Gene Expression Heatmap of genes upregulated in \nnasal_gene~blood_Eos and bronch_gene~BAL_neut",# heat map title
RowSideColors = deg_nb_reordered$type_col,
ColSideColors = ifelse(phen_sub$rna_sample=="nasal","#E66100","#5D3A9B"))
library(limma)
library(edgeR)
library(dplyr)
library(DESeq2)
######################
## load readcount data
######################
# load count data from seq batch 1-4
counts<-file.path("./resources/working_data/copy_of_batch1234_readcount_matrix_allsamples.afterQC.txt") # original RNAseqs count data table is in the MS_asthma folder
counts<-if(file.exists(counts)){read.delim(counts)}
counts.ID<-colnames(counts)
################################
## load phenotype and batch data
################################
# make vectors of variables for later use as an input for function 'run_deseq2_DEG_analysis'
source.cell.log<-c(
"BAL_eos_ct_log",
"BAL_eos_p_log",
"BAL_neut_ct_log",
"BAL_neut_p_log",
"BAL_wbc_log",
"blood_eos_log",
"blood_eos_p_log",
"blood_neut_log",
"blood_neut_p_log",
"blood_wbc_log")
source.cell<-c(
"BAL_eos_ct",
"BAL_eos_p",
"BAL_neut_ct",
"BAL_neut_p",
"BAL_wbc",
"blood_eos",
"blood_eos_p",
"blood_neut",
"blood_neut_p",
"blood_wbc")
# asthma biomarker phenotype file saved in  'phenotype'
phenotype<-file.path("./resources/processed_data/Nasal_Biomarkers_BAL_transformed.csv")
phenotype<-if(file.exists(phenotype)){read.csv(phenotype, row.names = NULL)}
numeric_id<-phenotype$ID
phenotype$ID<-sprintf("%03d",numeric_id) # adds padded zeros in front of the subject ID numbers
phenotype<-mutate(phenotype,pos_cellcount=phenotype[,source.cell]>0)%>%arrange(ID) # check which cell counts are positive.
###########################################################################################
## subset phenotype data for which the samples exist for nasal/bronchial RNAseq experiments
###########################################################################################
nID<-paste0("N",phenotype$ID) # N*** indicates nasal sample ID, sequence data is not available for all as of 2023-10-04
bID<-paste0("B",phenotype$ID) # B*** indicates bronchial sample ID, sequence data is not available for all as of 2023-10-04
nexist<-nID%in%counts.ID # find which subjects s/p nasal and had bronchial sample RNAseq completed. Nasal samples in batch 1-4 only sequenced to ID 337
bexist<-bID%in%counts.ID # find which subjects s/p BAL and had bronchial sample RNAseq completed
nsample<-nID[nexist] # nasal sample ID in the readcount matrix (batch 1-4) that has BAL phenotype data
bsample<-bID[bexist] # bronchial sample ID in the readcount matrix (batch 1-4) that has BAL phenotype data
nphen<-phenotype[phenotype$ID%in%substring(nsample,2),] # phenotype table with nsample
bphen<-phenotype[phenotype$ID%in%substring(bsample,2),] # phenotype table with bsample
nphen<-mutate(nphen, SampleID=nsample)%>%relocate(SampleID, .before=1) # include sample ID for nasal RNAseq samples
bphen<-mutate(bphen, SampleID=bsample)%>%relocate(SampleID, .before=1) # include sample ID for bronchial RNAseq samples
# left join batch info table with nasal/bronchial phenotype table
## get batch information
batch<-file.path("./resources/processed_data/asthma_nasal_bronchial_batch1234_info.txt")
batch.info<-if(file.exists(batch)){read.delim(batch)}
## define function join_phenotype_batch_info. p is phenotype table. b is batch info table. Factorize the batch info.
join_phenotype_batch_info<-function(p,b){
table<-left_join(p,b, by="SampleID")
table$Batch<-factor(table$Batch, levels=unique(table$Batch))
return(table)
}
nphen<-join_phenotype_batch_info(nphen,batch.info)
bphen<-join_phenotype_batch_info(bphen,batch.info)
nphen<-nphen%>%mutate(IsBatch4 = Batch == "batch4")
bphen<-bphen%>%mutate(IsBatch4 = Batch == "batch4")
# scale the cell count information
# Mike Love: I'd recommend however to center and scale the numeric covariates for model fitting improvement.
# scale the columns named with source.cell.log
nphen<-mutate_at(nphen,vars(all_of(source.cell.log)),scale) # scales and mutates all log-transformed cell counts
bphen<-mutate_at(bphen,vars(all_of(source.cell.log)),scale) # scales and mutates all log-transformed cell counts
# decide which analysis to perform, then set the phenotype data as phen
###################################
# custom functions for DEG analysis
###################################
## gene filter
filter_low_expressed_genes_method2<-function(readcounts, n_sample){ # function to filter low counts genes using TMM normalized lcpm as a cutoff point
x<-readcounts
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
lcpm.cutoff <- log2(10/M + 2/L) # lcpm cutoff for filtering genes with very low counts
### normalize counts with TMM
norm.factor<-calcNormFactors(x, method = "TMM")
sample.size<-length(colnames(x))
for(i in 1:sample.size){
x[,i]<-x[,i]/norm.factor[i]
}
### calculate lcpm based on TMM normalized counts
lcpm.x<-cpm(x,log=TRUE)
drop.genes<-which(rowSums(lcpm.x<lcpm.cutoff)>n_sample) # which genes have normalized lcpm less than the cutoff in >10% of the samples
x<-x[-drop.genes,] # readcounts retained
print(paste("# of dropped genes:",length(drop.genes))) # number of dropped genes
return(x)
}
## count table-related
rowgenes_counttable<-function(c,cf){ # function to change rownames of the count table with gene names
g<-rownames(c)
gf<-rownames(cf)
c<-c[g%in%gf,]
return(c)
}
## DEsesq
run_deseq2_DEG_analysis<-function(countdata,coldata,design,des){ # function to run deseq using data from matrix
print(paste("design:",unique(phen$Type),"expression =",des, sep = " "))
dds<-DESeqDataSetFromMatrix(countData = countdata,colData=coldata, design=as.formula(design))
dds<-DESeq(dds)
print("resultnames")
print(resultsNames(dds))
return(dds)
}
get_DEG_results<-function(dds,resultname){ # function to call results of the deseq analysis with 'results' function
res<-results(dds, name=resultname) # use source.cell.log element for resultname.
res <- res[order(res$padj),]
return(res)
}
## summarize the data input
generate_DEG_input_summary_table<-function(){
filter_method<-"TMM normalized LCPM cutoff"
n_filtered_genes<-paste("analyzed n_genes:", nrow(ct),",","filtered n_genes:",nrow(counts)-nrow(ct))
samples<-sapply(dds, function(d){colData(d)$SampleID%>%paste(collapse = ",")})
dds<-paste("dds",1:length(dds),sep="")
results<-paste("res",1:length(res),sep="")
design<-deg.design
df<-data.frame(dds=dds,results=results,design=design,samples=samples,filter_method=filter_method,n_filtered_genes=n_filtered_genes)
return(df)
}
##  summary table of the DEG analysis
generate_DEG_summary_table<-function(){
reslist<-paste("res.sig",1:length(res.sig),sep="")
n_sig_deg<-sapply(res.sig,nrow)
design<-deg.design
source_cell<-source.cell
df<-data.frame(type=unique(phen$Type),results=reslist,n_sig_deg,design=design,source_cell=source_cell, row.names = NULL)
return(df)
}
##############################################################
#set colData (phenotype data) for bronchial RNAseq experiments
##############################################################
phen<-bphen  # If bronchial analysis, use this
# all non-NA values. cell count >=0
pi<-lapply(phen[,source.cell.log],function(data){a<-!is.na(data);return(a)})
df<-vector("list",length=10) # list of data framese used as an input for deseq2. all cell counts
names(df)<-paste(source.cell.log,"all",sep="_")
for(i in 1:10){
df[[i]]<-phen[pi[[i]],c("SampleID",source.cell.log[i], "Batch","IsBatch4")]
}
print(sapply(df,dim)[1,])
# all cell count >0
pi.pos<-lapply(phen[,source.cell],function(data){a<-which(data>0);return(a)})
df.pos<-vector("list",length=10) # list of data framese used as an input for deseq2. subset cell count > 0
names(df.pos)<-paste(source.cell.log,"pos",sep = "_")
for(i in 1:10){
df.pos[[i]]<-phen[pi.pos[[i]],c("SampleID",source.cell.log[i], "Batch","IsBatch4")]
}
print(sapply(df.pos,dim)[1,])
# if analyzing only cell counts >0, use df<-df.pos
#################################################################
# bronchial expression ~ log(cell count>0) + Batch
#################################################################
# coldata for DESeq2
df.input<-df.pos
# filtering counts table to remove low expressed genes
## select RNAseq counts
id<-phen$SampleID
cols<-colnames(counts)%in%id
ct<-counts[,cols] # First column is actually gene name
genes<-counts$SampleID
rownames(ct)<-genes
## Filter counts (readcount table for nasal sample
c2<-filter_low_expressed_genes_method2(ct,4)
# run the DEG for continuous predictors
deg.design<-paste("~",source.cell.log,"+ Batch") # set design: nasal expression ~ log(cell count>0) + Batch
ct<-rowgenes_counttable(ct,c2) # low bcounts will be filtered using method 2: use TMM normalized lcpm as a cutoff point
print(deg.design)
count.table<-lapply(df.input,function(df){d<-df; ct<-ct[,colnames(ct)%in%d$SampleID]; return(ct)}) # list of subsetted count table. Each element is a count table with samples for each of the experimental design.
dds<-vector("list",length=10)
res<-vector("list",length=10)
res.sig<-vector("list",length=10)
names(res)<-deg.design
names(res.sig)<-deg.design
for(i in 1:10){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], source.cell.log[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
## writing the results
deg.folder<-paste("deg",Sys.Date(),sep="_")
deg.dir<-file.path("./reports",deg.folder)
if(!dir.exists(deg.dir)){
dir.create(deg.dir)
}
if(dir.exists(deg.dir)){
for(i in 1:10){
a<-res.sig[[i]]
write.csv(a,row.names=TRUE,file.path(deg.dir,paste("deg",unique(phen$Type),"poscells",deg.design[[i]],"res",i,Sys.Date(),".csv",sep="_"))) } #specify allcells vs poscells
}
res
deg.dir
if(dir.exists(deg.dir)){
for(i in 1:10){
a<-res[[i]]
write.csv(a,row.names=TRUE,file.path(deg.dir,paste("deg",unique(phen$Type),"poscells",deg.design[[i]],"res",i,Sys.Date(),".csv",sep="_"))) } #specify allcells vs poscells
}
source("~/.active-rstudio-document")
deg.dir
data.folder<-file.path("./reports/deg_2024-03-13")
list.files(data.folder)
data_list<-list.files(data.folder)
# exploration of cell count distribution
# comparing distribution of raw cell counts and log-transformed counts
library(tidyverse)
phenotype<-read.csv("./resources/processed_data/Nasal_Biomarkers_BAL_transformed.csv")
a<-colnames(phenotype)[2:21]
a<-phenotype[,a]
a<-a[,order(names(a))]
xlab<-colnames(a)
index<-!sapply(a,is.na)
log_columns <- grep("_log$", names(a), value = TRUE)
standardized_data <- a %>%
mutate_at(log_columns, scale)
a
a$BAL_eos_p>3
table(a$BAL_eos_p>3)
is.na(a$BAL_eos_p)
is.na(a$BAL_eos_p)%>%sum
20/75
library(dplyr)
library(EnhancedVolcano)
library(pheatmap)
library(gridExtra)
library(grid)
data.folder<-file.path("./reports/local_only/deg~bal-blood_cell(continuous)+batch/deg_gene_list")
####################################################################
# data exploration of DEG analysis using nasal/bronchial rnaseq data
# model: "Nasal DEG ~ blood AEC (>0) + Batch
# model: "Bronch DEG ~ BAL ANC(>0) + Batch
####################################################################
res_nasal<-read.csv(file.path(data.folder,"nasal_res6.csv"),row.names = 1)
res_bronch<-read.csv(file.path(data.folder,"bronch_res3.csv"),row.names = 1)
par(mfrow=c(1,2))
nasal_kda_up_genes<-c("FAM92B", "AK7", "DNAH9", "TSNAXIP1", "LRRC23", "RSPH14","RSPH4A","SPA17", "SAXO2","NME9","CCDC108","DZIP1L")
nasal_kda_down_genes<-c("MIER3","FGL2","VSIG10L","FAM49B","HOPX","NAMPT","IL1RAP","TGFBI","PHF20L1","PLXNC1")
anh_do_nasal_kda_cilia_module<-c("FOXJ1","CAPS","TEKT2","TPPP3","C19orf51","C2orf70","LRRC10B","C2orf81","LRRC23","TMEM231")
anh_do_nasal_kda_inf_module<-c("FGL2","PTPRC","FYB","TLR8","SNX10")
nasal_genes<-rownames(res_nasal)
bronch_genes<-rownames(res_bronch)
# create custom 'nasal' gene key-value pairs for color based on whethe rsomething is KDA DEG or not
keyvals_n <- ifelse(
nasal_genes%in%nasal_kda_down_genes, 'royalblue',
ifelse(nasal_genes%in%nasal_kda_up_genes, 'gold',
'grey'))
keyvals_n[which(nasal_genes%in%anh_do_nasal_kda_cilia_module)]<-"cyan"
keyvals_n[which(nasal_genes%in%anh_do_nasal_kda_inf_module)]<-"magenta"
keyvals_n[is.na(keyvals)] <- 'grey'
go_folder<-file.path("./reports/local_only/deg~bal-blood_cell(continuous)+batch/GO")
# 1. GO term for Nasal DEG ~ blood AEC_+batch
nasal_go<-read.csv(file.path(go_folder,"GO_david_Nasal_poscells_~ blood_eos_log + Batch_pos_cells_res_6_up_down.csv"))
nasal_go<-nasal_go%>%
filter(FDR<0.05)%>%
mutate(Fold.Enrichment=ifelse(deg_lfc2=="down",-Fold.Enrichment,Fold.Enrichment))%>%
arrange(desc(deg_lfc2),desc(Fold.Enrichment))
nasal_go<-nasal_go[c(1:10,129:138),]
nasal_go$term<-factor(nasal_go$term, levels=unique(nasal_go$term))
library(ggplot2)
# Plot
ggplot(nasal_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(-log10(FDR), 1)), hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
# 2. GO term for Bronch DEG ~ BAL ANC +batch
bronch_go<-read.csv(file.path(go_folder,"GO_david_Bronchial_poscells_~ BAL_neut_ct_log + Batch_pos_cells_res_3_min_abs_lfc_0.58_top100.csv"))
bronch_go<-bronch_go%>%
filter(FDR<0.05)%>%
mutate(Fold.Enrichment=ifelse(deg_lfc2=="down",-Fold.Enrichment,Fold.Enrichment))%>%
arrange(desc(deg_lfc2),desc(Fold.Enrichment))
bronch_go<-bronch_go[c(1:10,41:50),]
bronch_go$term<-factor(bronch_go$term, levels=unique(bronch_go$term))
library(ggplot2)
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(-log10(FDR), 1)), hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
bronch_go%>%filter(term=="serine protease inhibitor complex")
bronch_go
?geom_text_repel
?geom_text
?geom_label
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), nudge_y=0.5, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)", size=5) +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)", size=10) +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)", size=20) +
theme(axis.text.y = element_text(size = 10))  # Adjust y-axis label size for better readability
?labs
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 12),  # Change size of x-axis labels
axis.text.y = element_text(size = 12))  # Change size of y-axis labels  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 12),  # Change size of x-axis labels
axis.text.y = element_text(size = 12),
axis.title= element_text(size=10))  # Change size of y-axis labels  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 12),  # Change size of x-axis labels
axis.text.y = element_text(size = 12),
axis.title.y= element_text(size=10))  # Change size of y-axis labels  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 12),  # Change size of x-axis labels
axis.text.y = element_text(size = 12),
axis.title.y= element_text(size=200))  # Change size of y-axis labels  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 12),  # Change size of x-axis labels
axis.text.y = element_text(size = 12),
axis.title= element_text(size=20))  # Change size of y-axis labels  # Adjust y-axis label size for better readability
ggplot(bronch_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 15),  # Change size of x-axis labels
axis.text.y = element_text(size = 15),
axis.title= element_text(size=20))  # Change size of y-axis labels  # Adjust y-axis label size for better readability
# Plot
ggplot(nasal_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(-log10(FDR), 1)), hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 15),  # Change size of x-axis labels
axis.text.y = element_text(size = 15),
axis.title= element_text(size=20))  # Adjust y-axis label size for better readability
# Plot
ggplot(nasal_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 15),  # Change size of x-axis labels
axis.text.y = element_text(size = 15),
axis.title= element_text(size=20))  # Adjust y-axis label size for better readability
# Plot
ggplot(nasal_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 15),  # Change size of x-axis labels
axis.text.y = element_text(size = 12),
axis.title= element_text(size=20))  # Adjust y-axis label size for better readability
bronch_go$term<-factor(bronch_go$term, levels=unique(bronch_go$term))
# Plot
ggplot(nasal_go, aes(x = Fold.Enrichment, y = term, fill = -log10(FDR))) +
geom_bar(stat = "identity") +
geom_label(aes(label = round(-log10(FDR), 1)), fill="white",nudge_y=0.3, hjust = -0.1, size = 3, color = "black") +  # Add text labels for log10(FDR)
scale_fill_gradient(low = "blue", high = "red") +  # Adjust color gradient as needed
labs(x = "Fold Enrichment", y = "Gene Ontology Term", fill = "-log10(FDR)") +
theme(axis.text.x = element_text(size = 15),  # Change size of x-axis labels
axis.text.y = element_text(size = 12),
axis.title= element_text(size=20))  # Adjust y-axis label size for better readability
bronch_go
rownames(bronch_go)<-c(1:length(bronch_go))
rownames(bronch_go)
c(1:length(bronch_go))
rownames(bronch_go)<-c(1:ncol(bronch_go))
c(1:ncol(bronch_go))
dim()
dim(bronch_go)
rownames(bronch_go)<-c(1:nrow(bronch_go))
bronch_go
bronch_go$Genes[1:16]
unlist(bronch_go$Genes[1:16])
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})%>%unlist
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})%>%paste
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})%>%lapply(unlist)
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})%>%c()
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})%>%unlist
sapply(bronch_go$Genes[1:16], function(genes){strsplit(genes, ", ")})%>%sapply(unlist)
