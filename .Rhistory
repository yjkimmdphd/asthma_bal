xlab<-colnames(a)
index<-!sapply(a,is.na)
par(mfcol = c(2, 5))
for(i in 1:10){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
par(mfcol = c(2, 5))
for(i in 11:20){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
par(mfcol = c(4, 5))
for(i in 1:10){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in 11:20){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
a
xlab
index
a
log_columns <- grep("_log$", names(a), value = TRUE)
log_columns
standardized_data <- a %>%
mutate_at(vars(log_columns), scale)
standardized_data <- a %>%
mutate_at(all_of(log_columns), scale)
standardized_data <- a %>%
mutate_at(log_columns, scale)
standardized_data
par(mfcol = c(4, 5))
for(i in 1:10){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in 11:20){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
xlab
xlab[seq(from = 2, to = 10, by = 2)]
xlab[seq(from = 1, to = 10, by = 2)]
xlab[c(seq(from = 2, to = 10, by = 2), seq(from = 1, to = 10, by = 2)])
xlab[c(seq(from = 2, to = 10, by = 2), seq(from = 1, to = 10, by = 2)])]
xlab[c(seq(from = 2, to = 10, by = 2), seq(from = 1, to = 10, by = 2))]
xlab[c(seq(from = 1, to = 10, by = 2), seq(from = 2, to = 10, by = 2))]
par(mfcol = c(4, 5))
#### 1. BAL cell counts
for(i in c(seq(from = 1, to = 10, by = 2), seq(from = 2, to = 10, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standarized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in c(seq(from = 11, to = 20, by = 2), seq(from = 12, to = 20, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standarized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
par(mfcol = c(4, 5))
#### 1. BAL cell counts
for(i in c(seq(from = 1, to = 10, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in c(seq(from = 2, to = 10, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in c(seq(from = 11, to = 20, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in c(seq(from = 12, to = 20, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
xlab[]
# exploration of cell count distribution
# comparing distribution of raw cell counts and log-transformed counts
library(tidyverse)
phenotype<-read.csv("./resources/processed_data/Nasal_Biomarkers_BAL_transformed.csv")
a<-colnames(phenotype)[2:21]
a<-phenotype[,a]
a<-a[,order(names(a))]
xlab<-colnames(a)
index<-!sapply(a,is.na)
log_columns <- grep("_log$", names(a), value = TRUE)
standardized_data <- a %>%
mutate_at(log_columns, scale)
### hist of standardized data
par(mfcol = c(4, 5))
#### 1. BAL cell counts
for(i in c(seq(from = 1, to = 10, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in c(seq(from = 2, to = 10, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in c(seq(from = 11, to = 20, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in c(seq(from = 12, to = 20, by = 2))){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
### hist of non-standardized data
par(mfcol = c(4, 5))
for(i in 1:10){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in 11:20){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
standardized_data%>%colnames
seq(from = 1, to = 10, by = 2)
seq(from = 2, to = 10, by = 2)
seq(from = 11, to = 20, by = 2)
seq(from = 12, to = 20, by = 2)
colnames(standardized_data[seq(from = 1, to = 10, by = 2)])
colnames(standardized_data[seq(from = 2, to = 10, by = 2)])
par(mfcol = c(4, 5))
#### 1. BAL cell counts
for(i in seq(from = 1, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = colnames(k[i]),
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 2, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = colnames(k[i]),
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in seq(from = 11, to = 20, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = colnames(k[i]),
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 12, to = 20, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = colnames(k[i]),
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
xlab[seq(from = 2, to = 10, by = 2)]
par(mfcol = c(4, 5))
#### 1. BAL cell counts
for(i in seq(from = 1, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
par(mfrow = c(4,5))
#### 1. BAL cell counts
for(i in seq(from = 1, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
par(mfrow = c(4,5))
#### 1. BAL cell counts
for(i in seq(from = 1, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 2, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in seq(from = 11, to = 20, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 12, to = 20, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
### hist of non-standardized data
#### 1. BAL cell counts
for(i in seq(from = 1, to = 10, by = 2)){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 2, to = 10, by = 2)){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in seq(from = 11, to = 20, by = 2)){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 12, to = 20, by = 2)){
k<-a[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
### hist of standardized data
par(mfrow = c(4,5))
#### 1. BAL cell counts
for(i in seq(from = 1, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 2, to = 10, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
#### 2. Bld cell counts
for(i in seq(from = 11, to = 20, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = xlab[i], ylab = "Frequency", col = "#69b3a2", border = "black")
}
for(i in seq(from = 12, to = 20, by = 2)){
k<-standardized_data[[i]][index[,i]]
hist(k,
main = xlab[i],
breaks=seq(min(k),max(k),length.out=25),
xlab = paste(xlab[i],"standardized",sep=" "), ylab = "Frequency", col = "#69b3a2", border = "black")
}
library(dplyr)
library(EnhancedVolcano)
library(pheatmap)
data.folder<-file.path("./reports/local_only/deg~bal-blood_cell(continuous)+batch/deg_gene_list")
list.files(data.folder)
res_bronch<-read.csv(file.path(data.folder,"deg_Bronchial_poscells_~ BAL_neut_ct_log + Batch_res_3_2024-01-09_.csv"),row.names = 1)
res_bronch
res_nasal<-read.csv(file.path(data.folder,"deg_Nasal_poscells_~ blood_eos_log + Batch_res_6_2024-01-09_.csv"),row.names = 1)
res_nasal
EnhancedVolcano(res_nasal,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
res_nasal<-read.csv(file.path(data.folder,"deg_Nasal_poscells_~ blood_eos_log + Batch_res_6_2024-01-09_.csv"),row.names = 1)
res_bronch<-read.csv(file.path(data.folder,"deg_Bronchial_poscells_~ BAL_neut_ct_log + Batch_res_3_2024-01-09_.csv"),row.names = 1)
EnhancedVolcano(res_nasal,
lab = rownames(res_nasal),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
dds
EnhancedVolcano(res_bronch,
lab = rownames(res_nasal),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
EnhancedVolcano(res_bronch,
lab = rownames(res_nasal),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
EnhancedVolcano(res_bronch,
lab = rownames(res_bronch),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
EnhancedVolcano(res_bronch,
lab = rownames(res_bronch),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 1,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
par(mfrow=(1,2))
EnhancedVolcano(res_nasal,
lab = rownames(res_nasal),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
EnhancedVolcano(res_bronch,
lab = rownames(res_bronch),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 1,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
par(mfrow=c(1,2))
EnhancedVolcano(res_nasal,
lab = rownames(res_nasal),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 2,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
EnhancedVolcano(res_bronch,
lab = rownames(res_bronch),
x = 'log2FoldChange',
y = 'pvalue',
xlab = bquote(~Log[2]~ 'fold change'),
pCutoff = 10e-4,
FCcutoff = 1,
cutoffLineType = 'twodash',
cutoffLineWidth = 0.8,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendLabels=c('Not sig.','Log (base 2) FC','p-value',
'p-value & Log (base 2) FC'),
legendPosition = 'top',
legendLabSize = 16,
legendIconSize = 5.0)
