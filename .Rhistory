write.csv(a,row.names=FALSE,file.path(deg.dir,paste("dds",unique(phen$Type),"allcells","res_summary","cellcount_thr+Batch",Sys.Date(),".csv",sep="_")))
}
### threshold assessment for blood Eos %
c<-numeric()
for(i in 1:40){
c[i]<-sum(phen$blood_eos_p<i)/nrow(phen)
}
### threshold assessment for blood Eos count
d<-numeric()
for(i in 1:40){
d[i]<-sum(phen$blood_eos<i)/nrow(phen)
}
phen$blood_eos%>%range
phen$blood_eos
phen$blood_eos_p%>%range
range(phen$blood_eos_p,na.omit=TRUE)
na.omit(phen$blood_eos)%>%rnage
na.omit(phen$blood_eos)%>%range
# compare the each samples bal Eos data against the threshold
phen<-phen%>%mutate(isBalEosCtNa=is.na(BAL_eos_ct),
isbloodEosCtNa=is.na(blood_eos),
isBalEosCtZero=BAL_eos_ct==0,
isBalEosct2=BAL_eos_ct<2,
isBalEosP2=BAL_eos_p<2,
isBalEosct6=BAL_eos_ct<6,
isBalEosP6=BAL_eos_p<6,
)
phen$isbloodEosCtNa
phen$isbloodEosCtNa%>%sum
na.omit(phen$blood_eos_p)%>%range
for(i in 1:18){
c[i]<-sum(phen$blood_eos_p<i)/nrow(phen)
}
c
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/nrow(phen)
}
print(c)
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/nrow(na.omit(phen$blood_eos_p))
}
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/length(na.omit(phen$blood_eos_p))
}
print(c)
print(data.frame(1:18,c))
data.frame(1:18,c)
length(c)
print(data.frame(1:40,c))
print(data.frame(1:40,c)[1:18,])
print(data.frame(thr=1:40,c)[1:18,])
print(data.frame(thr=1:40,proportion=c)[1:18,])
seq(1,1700,by=100)
seq(1,1700,by=99)
seq(1,1701,by=100)
round(seq(1,1701,by=100)/100,0)
round(seq(1,1701,by=100)/100+1,0)
for(i in seq(1,1701,by=100)){
d[round(seq(1,1701,by=100)/100+1,0)]<-sum(na.omit(phen$blood_eos)<i)/length(na.omit(phen$blood_eos))
}
d
phen$blood_eos
na.omit(phen$blood_eos)<200
sum(na.omit(phen$blood_eos)<200)
sum(na.omit(phen$blood_eos)<200)/length(na.omit(phen$blood_eos))
### threshold assessment for blood Eos count
d<-numeric()
for(i in seq(1,1701,by=100)){
d[round(seq(1,1701,by=100)/100+1,0)]<-sum(na.omit(phen$blood_eos)<i)/length(na.omit(phen$blood_eos))
}
d
round(seq(1,1701,by=100)/100+1,0)
round(seq(1,1701,by=100)/100+1,0)[1]
for(i in seq(1,1701,by=100)){print[i]}
for(i in seq(1,1701,by=100)){print(i)}
for(i in seq(1,1701,by=100)){
print(sum(na.omit(phen$blood_eos)<i)/length(na.omit(phen$blood_eos)))
}
for(i in seq(1,1701,by=100)){
d[round(i/100+1,0)]<-sum(na.omit(phen$blood_eos)<i)/length(na.omit(phen$blood_eos))
}
d
print(data.frame(thr= seq(1,1701,by=100),proportion=d)[1:18,])
### Eos summary
bal_eos_thr<-data.frame(threshold=1:40,eos_p_fraction= round(a,2),eos_ct_fraction=round(b,2))
checkThreshold(bal_eos_thr)
### threshold assessment for bal Eos %
a<-numeric()
for(i in 1:40){
a[i]<-sum(phen$BAL_eos_p<i)/nrow(phen)
}
### threshold assessment for bal Eos count
b<-numeric()
for(i in 1:40){
b[i]<-sum(phen$BAL_eos_ct<i)/nrow(phen)
}
### Eos summary
eos_thr<-data.frame(threshold=1:40,eos_p_fraction= round(a,2),eos_ct_fraction=round(b,2))
checkThreshold(eos_thr)
### blood Eos summary
print(data.frame(thr=1:40,proportion=c)[1:18,])
print(data.frame(thr= seq(1,1701,by=100),proportion=d)[1:18,])
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:40,proportion=c)[1:18,], blood_eos_ct_thr= seq(1,1701,by=100),proportion=d)[1:18,])
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:40,proportion=c)[1:18,], blood_eos_ct_thr= seq(1,1701,by=100),proportion=d)[1:18,]))
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:40,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d)[1:18,])
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d)[1:18,])
c
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c[1:18], blood_eos_ct_thr= seq(1,1701,by=100),proportion=d)[1:18,])
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c[1:18], blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
c
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/length(na.omit(phen$blood_eos_p))
}
c
### threshold assessment for blood Eos %
c<-numeric()
na.omit(phen$blood_eos_p)%>%range
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/length(na.omit(phen$blood_eos_p))
}
c
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
# compare the each samples bal Eos data against the threshold
phen<-phen%>%mutate(isBalEosCtNa=is.na(BAL_eos_ct),
isbloodEosCtNa=is.na(blood_eos),
isBalEosCtZero=BAL_eos_ct==0,
isBalEosct2=BAL_eos_ct<2,
isBalEosP2=BAL_eos_p<2,
isBalEosct6=BAL_eos_ct<6,
isBalEosP6=BAL_eos_p<6,
isbldEosCtZero=blood_eos==0,
isbldEosp4=blood_eos_p<4,
isbldEosp6=blood_eos_p<6,
isbldEosct200=blood_eos<200,
isbldEosct400=blood_eos<400
)
df%>%ncol
phen%>%ncol
df<-vector("list",length=length(48:58)) # list of data framese used as an input for deseq2. all cell counts
names(df)<-colnames(phen)[48:58]
for(i in 1:length(df)){
df[[i]]<-phen[,c("SampleID",names(df)[i], "Batch","isBalEosCtNa","isbloodEosCtNa")]
}
df
df<-vector("list",length=length(49:58)) # list of data framese used as an input for deseq2. all cell counts
names(df)<-colnames(phen)[49:58]
for(i in 1:length(df)){
df[[i]]<-phen[,c("SampleID",names(df)[i], "Batch","isBalEosCtNa","isbloodEosCtNa")]
}
print(sapply(df,dim)[1,])
df
colnames(phen)[49:58]
colnames(phen)[48:58]
rm(phen)
# if nasal cell analysis, phen<-nphen.
phen<-nphen  # If nasal analysis, use this
# phen<-bphen # If bronchial analysis, use this
# determine which phenotypoic thresholds to use by assessing the proportion of samples below the potential thresholds
checkThreshold<-function(data){
a<-c(max(which(data[,2]<0.54)),  max(which(data[,2]<0.60)),  max(which(data[,2]<0.70)),  max(which(data[,2]<0.80)))
b<-c(max(which(data[,3]<0.54)),  max(which(data[,3]<0.60)),  max(which(data[,3]<0.70)),  max(which(data[,3]<0.80)))
return(data.frame(proportion=c(0.54,60,70,80),thr1=a,thr2=b))
} # function that helps to determine the thresholds
## For BAL Eos
### threshold assessment for bal Eos %
a<-numeric()
for(i in 1:40){
a[i]<-sum(phen$BAL_eos_p<i)/nrow(phen)
}
### threshold assessment for bal Eos count
b<-numeric()
for(i in 1:40){
b[i]<-sum(phen$BAL_eos_ct<i)/nrow(phen)
}
### Eos summary
eos_thr<-data.frame(threshold=1:40,eos_p_fraction= round(a,2),eos_ct_fraction=round(b,2))
checkThreshold(eos_thr)
## For blood Eos
### threshold assessment for blood Eos %
c<-numeric()
na.omit(phen$blood_eos_p)%>%range
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/length(na.omit(phen$blood_eos_p))
}
### threshold assessment for blood Eos count
d<-numeric()
for(i in seq(1,1701,by=100)){
d[round(i/100+1,0)]<-sum(na.omit(phen$blood_eos)<i)/length(na.omit(phen$blood_eos))
}
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
# compare the each samples bal Eos data against the threshold
phen<-phen%>%mutate(isBalEosCtNa=is.na(BAL_eos_ct),
isbloodEosCtNa=is.na(blood_eos),
isBalEosCtZero=BAL_eos_ct==0,
isBalEosct2=BAL_eos_ct<2,
isBalEosP2=BAL_eos_p<2,
isBalEosct6=BAL_eos_ct<6,
isBalEosP6=BAL_eos_p<6,
isbldEosCtZero=blood_eos==0,
isbldEosp4=blood_eos_p<4,
isbldEosp6=blood_eos_p<6,
isbldEosct200=blood_eos<200,
isbldEosct400=blood_eos<400
)
colnames(phen)[48:58]
df<-vector("list",length=length(49:58)) # list of data framese used as an input for deseq2. all cell counts
names(df)<-colnames(phen)[49:58]
df
for(i in 1:length(df)){
df[[i]]<-phen[,c("SampleID",names(df)[i], "Batch","isBalEosCtNa","isbloodEosCtNa")]
}
print(sapply(df,dim)[1,])
df
print(lapply(df,dim)[1,])
print(lapply(df,dim))
sapply(df,dim)
# coldata for DESeq2
df.input<-df
# filtering counts table to remove low expressed genes
## select RNAseq counts
id<-phen$SampleID
cols<-colnames(counts)%in%id
ct<-counts[,cols] # First column is actually gene name
genes<-counts$SampleID
rownames(ct)<-genes
## Filter counts (readcount table for nasal sample
c2<-filter_low_expressed_genes_method2(ct,4)
# run the DEG for continuous predictors
## design: batch4 vs other batches. all cell counts
deg.design<-paste("~",names(df),"+ Batch")
ct<-rowgenes_counttable(ct,c2) # low counts will be filtered
print(deg.design)
count.table<-lapply(df.input,function(df){d<-df; ct<-ct[,colnames(ct)%in%d$SampleID]; return(ct)}) # list of subsetted count table. Each element is a count table with samples for each of the experimental design.
length(df)
## select RNAseq counts
id<-phen$SampleID
cols<-colnames(counts)%in%id
ct<-counts[,cols] # First column is actually gene name
genes<-counts$SampleID
rownames(ct)<-genes
## Filter counts (readcount table for nasal sample
c2<-filter_low_expressed_genes_method2(ct,4)
# run the DEG for continuous predictors
## design: gene expression ~ is_cellcount_threshold + Batch
deg.design<-paste("~",names(df),"+ Batch")
ct<-rowgenes_counttable(ct,c2) # low counts will be filtered
print(deg.design)
count.table<-lapply(df.input,function(df){d<-df; ct<-ct[,colnames(ct)%in%d$SampleID]; return(ct)}) # list of subsetted count table. Each element is a count table with samples for each of the experimental design.
dds<-vector("list",length=length(df))
res<-vector("list",length=length(df))
res.sig<-vector("list",length=length(df))
names(res)<-deg.design
names(res.sig)<-deg.design
for(i in 1:length(df)){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], paste(names(df),"TRUE",sep="")[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
count.table
lapply(count.table,ncol)
phen[,names(df)]
pi<-lapply(phen[,names(df)],function(data){a<-!is.na(data);return(a)})
pi
for(i in 1:length(df)){
df[[i]]<-phen[pi[[i]],c("SampleID",names(df)[i], "Batch","isBalEosCtNa","isbloodEosCtNa")]
}
df
dds
for(i in 6:length(df)){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], paste(names(df),"TRUE",sep="")[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
df
df[6]
for(i in 6:length(df)){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], paste(names(df),"TRUE",sep="")[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
df[6]
###########################################---------------------###########################################
# sample type: nasal
# gene filter: remove low counts
###########################################---------------------###########################################
# coldata for DESeq2
df.input<-df
for(i in 6:length(df)){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], paste(names(df),"TRUE",sep="")[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
## select RNAseq counts
id<-phen$SampleID
cols<-colnames(counts)%in%id
ct<-counts[,cols] # First column is actually gene name
genes<-counts$SampleID
rownames(ct)<-genes
## Filter counts (readcount table for nasal sample
c2<-filter_low_expressed_genes_method2(ct,4)
# run the DEG for continuous predictors
## design: gene expression ~ is_cellcount_threshold + Batch
deg.design<-paste("~",names(df),"+ Batch")
ct<-rowgenes_counttable(ct,c2) # low counts will be filtered
print(deg.design)
count.table<-lapply(df.input,function(df){d<-df; ct<-ct[,colnames(ct)%in%d$SampleID]; return(ct)}) # list of subsetted count table. Each element is a count table with samples for each of the experimental design.
for(i in 6:length(df)){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], paste(names(df),"TRUE",sep="")[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
## writing the results
deg.folder<-paste("deg",Sys.Date(),sep="_")
deg.dir<-file.path("./reports",deg.folder)
if(!dir.exists(deg.dir)){
dir.create(deg.dir)
}
if(dir.exists(deg.dir)){
for(i in 1:length(df)){
a<-res.sig[[i]]
write.csv(a,row.names=TRUE,file.path(deg.dir,paste("deg",unique(phen$Type),"allcells","res",i,deg.design[[i]],Sys.Date(),".csv",sep="_"))) }
}
## summarize the data input
if(dir.exists(deg.dir)){
a<-generate_DEG_input_summary_table()
write.csv(a,row.names=FALSE,file.path(deg.dir,paste("deg",unique(phen$Type),"allcells","analysis_input","cellcount_thr+Batch",Sys.Date(),".csv",sep="_")))
}
## summary table of the DEG analysis
if(dir.exists(deg.dir)){
a<-generate_DEG_summary_table()
write.csv(a,row.names=FALSE,file.path(deg.dir,paste("dds",unique(phen$Type),"allcells","res_summary","cellcount_thr+Batch",Sys.Date(),".csv",sep="_")))
}
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
### Eos summary
eos_thr<-data.frame(threshold=1:40,eos_p_fraction= round(a,2),eos_ct_fraction=round(b,2))
a<-numeric()
for(i in 1:40){
a[i]<-sum(phen$BAL_eos_p<i)/nrow(phen)
}
### threshold assessment for bal Eos count
b<-numeric()
for(i in 1:40){
b[i]<-sum(phen$BAL_eos_ct<i)/nrow(phen)
}
### Eos summary
eos_thr<-data.frame(threshold=1:40,eos_p_fraction= round(a,2),eos_ct_fraction=round(b,2))
checkThreshold(eos_thr)
checkThreshold<-function(data){
a<-c(max(which(data[,2]<0.54)),  max(which(data[,2]<0.60)),  max(which(data[,2]<0.70)),  max(which(data[,2]<0.80)))
b<-c(max(which(data[,3]<0.54)),  max(which(data[,3]<0.60)),  max(which(data[,3]<0.70)),  max(which(data[,3]<0.80)))
return(data.frame(proportion=c(0.54,60,70,80),bal_eos_p_thr=a,bal_eos_ct_thr=b))
} # function that helps to determine the thresholds
checkThreshold(eos_thr)
checkThreshold<-function(data){
a<-c(max(which(data[,2]<0.54)),  max(which(data[,2]<0.60)),  max(which(data[,2]<0.70)),  max(which(data[,2]<0.80)))
b<-c(max(which(data[,3]<0.54)),  max(which(data[,3]<0.60)),  max(which(data[,3]<0.70)),  max(which(data[,3]<0.80)))
return(data.frame(proportion=c("54%","60%","70%","80%"),bal_eos_p_thr=a,bal_eos_ct_thr=b))
} # function that helps to determine the thresholds
checkThreshold(eos_thr)
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
# if nasal cell analysis, phen<-nphen.
phen<-bphen  # If nasal analysis, use this
# phen<-bphen # If bronchial analysis, use this
# determine which phenotypoic thresholds to use by assessing the proportion of samples below the potential thresholds
checkThreshold<-function(data){
a<-c(max(which(data[,2]<0.54)),  max(which(data[,2]<0.60)),  max(which(data[,2]<0.70)),  max(which(data[,2]<0.80)))
b<-c(max(which(data[,3]<0.54)),  max(which(data[,3]<0.60)),  max(which(data[,3]<0.70)),  max(which(data[,3]<0.80)))
return(data.frame(proportion=c("54%","60%","70%","80%"),bal_eos_p_thr=a,bal_eos_ct_thr=b))
} # function that helps to determine the thresholds
## For BAL Eos
### threshold assessment for bal Eos %
a<-numeric()
for(i in 1:40){
a[i]<-sum(phen$BAL_eos_p<i)/nrow(phen)
}
### threshold assessment for bal Eos count
b<-numeric()
for(i in 1:40){
b[i]<-sum(phen$BAL_eos_ct<i)/nrow(phen)
}
### Eos summary
eos_thr<-data.frame(threshold=1:40,eos_p_fraction= round(a,2),eos_ct_fraction=round(b,2))
checkThreshold(eos_thr)
## For blood Eos
### threshold assessment for blood Eos %
c<-numeric()
na.omit(phen$blood_eos_p)%>%range
for(i in 1:18){
c[i]<-sum(na.omit(phen$blood_eos_p)<i)/length(na.omit(phen$blood_eos_p))
}
### threshold assessment for blood Eos count
d<-numeric()
for(i in seq(1,1701,by=100)){
d[round(i/100+1,0)]<-sum(na.omit(phen$blood_eos)<i)/length(na.omit(phen$blood_eos))
}
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
### blood Eos summary
print(data.frame(blood_eos_p_thr=1:18,proportion=c, blood_eos_ct_thr= seq(1,1701,by=100),proportion=d))
# compare the each samples bal Eos data against the threshold
phen<-phen%>%mutate(isBalEosCtNa=is.na(BAL_eos_ct),
isbloodEosCtNa=is.na(blood_eos),
isBalEosCtZero=BAL_eos_ct==0,
isBalEosct2=BAL_eos_ct<2,
isBalEosP2=BAL_eos_p<2,
isBalEosct6=BAL_eos_ct<6,
isBalEosP6=BAL_eos_p<6,
isbldEosCtZero=blood_eos==0,
isbldEosp4=blood_eos_p<4,
isbldEosp6=blood_eos_p<6,
isbldEosct200=blood_eos<200,
isbldEosct400=blood_eos<400
)
df<-vector("list",length=length(49:58)) # list of data framese used as an input for deseq2. all cell counts
names(df)<-colnames(phen)[49:58]
pi<-lapply(phen[,names(df)],function(data){a<-!is.na(data);return(a)})
for(i in 1:length(df)){
df[[i]]<-phen[pi[[i]],c("SampleID",names(df)[i], "Batch","isBalEosCtNa","isbloodEosCtNa")]
}
# coldata for DESeq2
df.input<-df
# filtering counts table to remove low expressed genes
## select RNAseq counts
id<-phen$SampleID
cols<-colnames(counts)%in%id
ct<-counts[,cols] # First column is actually gene name
genes<-counts$SampleID
rownames(ct)<-genes
id
source.cell
##  summary table of the DEG analysis
generate_DEG_summary_table<-function(){
reslist<-paste("res.sig",1:length(res.sig),sep="")
n_sig_deg<-sapply(res.sig,nrow)
design<-deg.design
source_cell<-source.cell
df<-data.frame(type=unique(phen$Type),results=reslist,n_sig_deg,design=design,row.names = NULL)
return(df)
}
###########################################---------------------###########################################
# sample type: bronchial
# gene filter: remove low counts
###########################################---------------------###########################################
# coldata for DESeq2
df.input<-df
# filtering counts table to remove low expressed genes
## select RNAseq counts
id<-phen$SampleID
cols<-colnames(counts)%in%id
ct<-counts[,cols] # First column is actually gene name
genes<-counts$SampleID
rownames(ct)<-genes
## Filter counts (readcount table for nasal sample
c2<-filter_low_expressed_genes_method2(ct,4)
# run the DEG for continuous predictors
## design: gene expression ~ is_cellcount_threshold + Batch
deg.design<-paste("~",names(df),"+ Batch")
ct<-rowgenes_counttable(ct,c2) # low counts will be filtered
print(deg.design)
count.table<-lapply(df.input,function(df){d<-df; ct<-ct[,colnames(ct)%in%d$SampleID]; return(ct)}) # list of subsetted count table. Each element is a count table with samples for each of the experimental design.
dds<-vector("list",length=length(df))
res<-vector("list",length=length(df))
res.sig<-vector("list",length=length(df))
names(res)<-deg.design
names(res.sig)<-deg.design
for(i in 1:length(df)){
dds[[i]]<-run_deseq2_DEG_analysis(count.table[[i]], df.input[[i]], deg.design[i],deg.design[i])
res[[i]]<-get_DEG_results(dds[[i]], paste(names(df),"TRUE",sep="")[i])
res.sig[[i]]<-res[[i]][which(res[[i]]$padj<=0.05),]
head(res.sig[[i]])
}
## writing the results
deg.folder<-paste("deg",Sys.Date(),sep="_")
deg.dir<-file.path("./reports",deg.folder)
if(!dir.exists(deg.dir)){
dir.create(deg.dir)
}
if(dir.exists(deg.dir)){
for(i in 1:length(df)){
a<-res.sig[[i]]
write.csv(a,row.names=TRUE,file.path(deg.dir,paste("deg",unique(phen$Type),"allcells","res",i,deg.design[[i]],Sys.Date(),".csv",sep="_"))) }
}
## summarize the data input
if(dir.exists(deg.dir)){
a<-generate_DEG_input_summary_table()
write.csv(a,row.names=FALSE,file.path(deg.dir,paste("deg",unique(phen$Type),"allcells","analysis_input","cellcount_thr+Batch",Sys.Date(),".csv",sep="_")))
}
## summary table of the DEG analysis
if(dir.exists(deg.dir)){
a<-generate_DEG_summary_table()
write.csv(a,row.names=FALSE,file.path(deg.dir,paste("dds",unique(phen$Type),"allcells","res_summary","cellcount_thr+Batch",Sys.Date(),".csv",sep="_")))
}
list.files()
getwd()
.libpaths()
libpaths()
libPaths()
