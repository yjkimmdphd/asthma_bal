x <- bphen %>% filter( > 0) %>% pull(BAL_neut_ct_log)
########
# data visualization for asthma phenotype and bal cell count
########
library(tidyverse)
library(gridExtra)
library(purrr)
bphen_path<-file.path("./resources/processed_data/scaled_phenotype_studyID_asthmaPhenotype_batch_cellCount_20240731.csv")
bphen<-read.csv(bphen_path,row.names = NULL)
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc", "asthma_phen_FVC_perc",
"asthma_phen_FEV1.FVC", "asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc", "asthma_phen_Post.alb_FEV1.FVC")
x <- bphen %>% filter(asthma_phen_FEV1_perc> 0) %>% pull(BAL_neut_ct_log)
y <- bphen %>% filter(asthma_phen_FEV1_perc> 0) %>% pull(asthma_phen_FEV1_perc)
# Plot the data
plot(x, y,xlab="log(bal ANC,all)",ylab="FEV1_&")
# Plot the data
plot(x, y,xlab="log(bal ANC,all)",ylab="FEV1_%")
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n")
model <- lm(asthma_phen_FEV1_perc ~ BAL_neut_ct_log, data = bphen)
# Add the regression line
abline(model, col = "red", lwd = 2)  # Red line with width of 2
# Display the correlation coefficient on the plot
text(x = min(x,na.rm=TRUE),
y = max(y,na.rm=TRUE),
labels = paste("r =", round(correlation_coefficient, 2),"R-squared:", round(r_squared,2),"P-value:", round(p_value,2)),
pos = 4,
col = "black")
# correlation PFT ~ ANC (all counts including 0)
par(mfrow=c(2,2))
library(dplyr)
# Extract the relevant vectors
x <- bphen %>% filter(asthma_phen_FEV1_perc> 0) %>% pull(BAL_neut_ct_log)
y <- bphen %>% filter(asthma_phen_FEV1_perc> 0) %>% pull(asthma_phen_FEV1_perc)
# Plot the data
plot(x, y,xlab="log(bal ANC,all)",ylab="FEV1_%")
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n")
model <- lm(asthma_phen_FEV1_perc ~ BAL_neut_ct_log, data = bphen)
# Add the regression line
abline(model, col = "red", lwd = 2)  # Red line with width of 2
# Display the correlation coefficient on the plot
text(x = min(x,na.rm=TRUE),
y = max(y,na.rm=TRUE),
labels = paste("r =", round(correlation_coefficient, 2),"R-squared:", round(r_squared,2),"P-value:", round(p_value,2)),
pos = 4,
col = "black")
# correlation ACT ~ ANC (>0)
library(dplyr)
# Extract the relevant vectors
x <- bphen %>% filter(BAL_neut_ct>0,asthma_phen_FEV1_perc > 0) %>% pull(BAL_neut_ct_log)
y <- bphen %>% filter(BAL_neut_ct>0,asthma_phen_FEV1_perc > 0) %>% pull(asthma_phen_FEV1_perc)
# Plot the data
plot(x, y,xlab="log(bal ANC, >0)",ylab="FEV1_perc")
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n")
model <- lm(asthma_phen_FEV1_perc ~ BAL_neut_ct_log, data = bphen)
# Add the regression line
abline(model, col = "red", lwd = 2)  # Red line with width of 2
# Display the correlation coefficient on the plot
text(x = min(x,na.rm=TRUE),
y = max(y,na.rm=TRUE),
labels = paste("r =", round(correlation_coefficient, 2),"R-squared:", round(r_squared,2),"P-value:", round(p_value,2)),
pos = 4,
col = "black")
# correlation ACT ~ neut P
library(dplyr)
# Extract the relevant vectors
x <- bphen %>% filter(asthma_phen_FEV1_perc > 0) %>% pull(BAL_neut_p_log)
y <- bphen %>% filter(asthma_phen_FEV1_perc > 0) %>% pull(asthma_phen_FEV1_perc)
# Plot the data
plot(x, y,xlab="log(bal neut %,all)",ylab="ACT score")
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n")
model <- lm(asthma_phen_FEV1_perc ~ BAL_neut_p_log, data = bphen)
# Add the regression line
abline(model, col = "red", lwd = 2)  # Red line with width of 2
text(x = min(x,na.rm=TRUE),
y = max(y,na.rm=TRUE),
labels = paste("r =", round(correlation_coefficient, 2),"R-squared:", round(r_squared,2),"P-value:", round(p_value,2)),
pos = 4,
col = "black")
# correlation ACT ~ neut %>0
library(dplyr)
# Extract the relevant vectors
x <- bphen %>% filter(BAL_neut_p>0,asthma_phen_FEV1_perc > 0) %>% pull(BAL_neut_p_log)
y <- bphen %>% filter(BAL_neut_p>0,asthma_phen_FEV1_perc > 0) %>% pull(asthma_phen_FEV1_perc)
# Plot the data
plot(x, y,xlab="log(bal neut %, >0)",ylab="ACT score")
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n")
model <- lm(asthma_phen_FEV1_perc ~ BAL_neut_p_log, data = bphen)
# Add the regression line
abline(model, col = "red", lwd = 2)  # Red line with width of 2
text(x = min(x,na.rm=TRUE),
y = max(y,na.rm=TRUE),
labels = paste("r =", round(correlation_coefficient, 2),"R-squared:", round(r_squared,2),"P-value:", round(p_value,2)),
pos = 4,
col = "black")
str(bphen)
library(ggplot2)
library(ggpubr)
# Assuming bphen is your data frame
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc",
"asthma_phen_FVC_perc", "asthma_phen_FEV1.FVC",
"asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc",
"asthma_phen_Post.alb_FEV1.FVC")
# Conditions to subset data
conditions <- list(
"BAL_neut_ct > 0" = bphen$BAL_neut_ct > 0,
"BAL_neut_ct >= 0" = bphen$BAL_neut_ct >= 0,
"BAL_neut_p > 0" = bphen$BAL_neut_p > 0,
"BAL_neut_p >= 0" = bphen$BAL_neut_p >= 0
)
# Function to create scatter plots with correlation details
create_scatter_plots <- function(data, variables, condition_name) {
for (var1 in variables) {
for (var2 in variables) {
if (var1 != var2) {
p <- ggplot(data, aes_string(x = var1, y = var2)) +
geom_point() +
stat_cor(method = "pearson", label.x = 3) + # Add correlation coefficient
labs(title = paste(condition_name, ":", var1, "vs", var2))
print(p)
}
}
}
}
# Loop over each condition and create scatter plots
for (condition_name in names(conditions)) {
subset_df <- bphen[conditions[[condition_name]], variables_to_test]
create_scatter_plots(subset_df, variables_to_test, condition_name)
}
# Load necessary libraries
library(ggplot2)
library(ggpubr)
library(patchwork)
# Assuming bphen is your data frame
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc",
"asthma_phen_FVC_perc", "asthma_phen_FEV1.FVC",
"asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc",
"asthma_phen_Post.alb_FEV1.FVC")
# Conditions to subset data
conditions <- list(
"BAL_neut_ct > 0" = bphen$BAL_neut_ct > 0,
"BAL_neut_ct >= 0" = bphen$BAL_neut_ct >= 0,
"BAL_neut_p > 0" = bphen$BAL_neut_p > 0,
"BAL_neut_p >= 0" = bphen$BAL_neut_p >= 0
)
# Function to create scatter plots with correlation details
create_scatter_plots <- function(data, variables, condition_name) {
plots <- list()
plot_count <- 1
for (var1 in variables) {
for (var2 in variables) {
if (var1 != var2) {
p <- ggplot(data, aes_string(x = var1, y = var2)) +
geom_point() +
stat_cor(method = "pearson", label.x = 3) + # Add correlation coefficient
labs(title = paste(condition_name, ":", var1, "vs", var2)) +
theme(plot.title = element_text(size = 10))
plots[[plot_count]] <- p
plot_count <- plot_count + 1
}
}
}
return(plots)
}
# Create multipanel figures for each condition
all_plots <- list()
for (condition_name in names(conditions)) {
subset_df <- bphen[conditions[[condition_name]], variables_to_test]
plots <- create_scatter_plots(subset_df, variables_to_test, condition_name)
all_plots <- c(all_plots, plots)
}
# Combine all plots into a single multipanel figure
combined_plot <- wrap_plots(all_plots, ncol = 3)
# Print the combined plot
print(combined_plot)
dim(all_plots)
length(all_plots)
wrap_plots(all_plots[1:12],ncol=3)
# Load necessary libraries
library(corrplot)
# Define your variables to test
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc",
"asthma_phen_FVC_perc", "asthma_phen_FEV1.FVC",
"asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc",
"asthma_phen_Post.alb_FEV1.FVC")
# Define the conditions
conditions <- list(
"BAL_neut_ct > 0" = bphen$BAL_neut_ct > 0,
"BAL_neut_ct >= 0" = bphen$BAL_neut_ct >= 0,
"BAL_neut_p > 0" = bphen$BAL_neut_p > 0,
"BAL_neut_p >= 0" = bphen$BAL_neut_p >= 0
)
# Function to calculate and plot correlation matrix
calculate_and_plot_correlations <- function(data, variables, condition, condition_name) {
# Subset the data based on the condition
subset_data <- data[condition, variables]
# Calculate the correlation matrix
cor_matrix <- cor(subset_data, use = "complete.obs")
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle", main = paste("Correlation Matrix for", condition_name))
}
# Set up the plotting area to display multiple plots
par(mfrow = c(4, 7), mar = c(2, 2, 2, 2))
# Loop through each condition and generate the plots
for (condition_name in names(conditions)) {
calculate_and_plot_correlations(bphen, variables_to_test, conditions[[condition_name]], condition_name)
}
# Load necessary libraries
library(corrplot)
library(dplyr)
# Define the variables to test
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc",
"asthma_phen_FVC_perc", "asthma_phen_FEV1.FVC",
"asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc",
"asthma_phen_Post.alb_FEV1.FVC")
# Define the conditions and corresponding filters
conditions <- list(
BAL_neut_ct_gt0 = "BAL_neut_ct > 0",
BAL_neut_ct_ge0 = "BAL_neut_ct >= 0",
BAL_neut_p_gt0 = "BAL_neut_p > 0",
BAL_neut_p_ge0 = "BAL_neut_p >= 0"
)
# Function to calculate and plot correlations for a given filter
calculate_and_plot_correlations <- function(data, condition, variables, condition_name) {
filtered_data <- data %>% filter(eval(parse(text = condition)))
cor_matrix <- cor(filtered_data[variables], use = "complete.obs")
# Visualize the correlation matrix with a title
corrplot(cor_matrix, method = "circle", main = paste("Correlation Matrix for", condition_name))
}
# Loop over each condition and plot the correlation matrices
for (condition_name in names(conditions)) {
condition <- conditions[[condition_name]]
calculate_and_plot_correlations(bphen, condition, variables_to_test, condition_name)
}
# Load necessary libraries
library(dplyr)
# Define the variables to test
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc",
"asthma_phen_FVC_perc", "asthma_phen_FEV1.FVC",
"asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc",
"asthma_phen_Post.alb_FEV1.FVC")
# Define the conditions and corresponding filters
conditions <- list(
BAL_neut_ct_gt0 = list(filter = "BAL_neut_ct > 0", x_var = "BAL_neut_ct_log"),
BAL_neut_ct_ge0 = list(filter = "BAL_neut_ct >= 0", x_var = "BAL_neut_ct_log"),
BAL_neut_p_gt0 = list(filter = "BAL_neut_p > 0", x_var = "BAL_neut_p_log"),
BAL_neut_p_ge0 = list(filter = "BAL_neut_p >= 0", x_var = "BAL_neut_p_log")
)
# Function to calculate, plot, and save correlations
calculate_and_plot_correlations <- function(data, condition, x_var, y_var) {
# Filter the data
filtered_data <- data %>% filter(eval(parse(text = condition)), eval(parse(text = y_var)) > 0)
# Extract the relevant vectors
x <- filtered_data %>% pull(!!sym(x_var))
y <- filtered_data %>% pull(!!sym(y_var))
# Plot the data
plot(x, y, xlab = paste("log(", x_var, ")", sep = ""), ylab = y_var)
# Perform correlation test
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Condition:", condition, "\n")
cat("Variable:", y_var, "\n")
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n\n")
# Linear model and regression line
model <- lm(y ~ x)
abline(model, col = "red", lwd = 2)  # Red line with width of 2
text(x = min(x, na.rm = TRUE),
y = max(y, na.rm = TRUE),
labels = paste("r =", round(correlation_coefficient, 2), "R-squared:", round(r_squared, 2), "P-value:", round(p_value, 2)),
pos = 4,
col = "black")
}
# Loop over each condition and variable
for (condition_name in names(conditions)) {
condition <- conditions[[condition_name]]$filter
x_var <- conditions[[condition_name]]$x_var
for (y_var in variables_to_test) {
# Generate plot file name
plot_filename <- paste0("plot_", condition_name, "_", y_var, ".png")
# Save the plot
png(plot_filename)
calculate_and_plot_correlations(bphen, condition, x_var, y_var)
dev.off()
}
}
# Loop over each variable and create a 2x2 grid of plots
for (y_var in variables_to_test) {
# Generate plot file name
plot_filename <- paste0("plots_2x2_", y_var, ".png")
# Save the 2x2 grid of plots
png(plot_filename, width = 800, height = 800)
par(mfrow = c(2, 2))  # Set up a 2x2 plotting area
for (condition_name in names(conditions)) {
condition <- conditions[[condition_name]]$filter
x_var <- conditions[[condition_name]]$x_var
calculate_and_plot_correlations(bphen, condition, x_var, y_var)
}
dev.off()
}
# Load necessary libraries
library(dplyr)
# Define the variables to test
variables_to_test <- c("asthma_phen_ACT.score", "asthma_phen_FEV1_perc",
"asthma_phen_FVC_perc", "asthma_phen_FEV1.FVC",
"asthma_phen_Post.alb_FEV1_perc",
"asthma_phen_Post.alb_FVC_perc",
"asthma_phen_Post.alb_FEV1.FVC")
# Define the conditions and corresponding filters
conditions <- list(
BAL_eos_ct_gt0 = list(filter = "BAL_eos_ct > 0", x_var = "BAL_eos_ct_log"),
BAL_eos_ct_ge0 = list(filter = "BAL_eos_ct >= 0", x_var = "BAL_eos_ct_log"),
BAL_eos_p_gt0 = list(filter = "BAL_eos_p > 0", x_var = "BAL_eos_p_log"),
BAL_eos_p_ge0 = list(filter = "BAL_eos_p >= 0", x_var = "BAL_eos_p_log")
)
# Function to calculate, plot, and save correlations
calculate_and_plot_correlations <- function(data, condition, x_var, y_var) {
# Filter the data
filtered_data <- data %>% filter(eval(parse(text = condition)), eval(parse(text = y_var)) > 0)
# Extract the relevant vectors
x <- filtered_data %>% pull(!!sym(x_var))
y <- filtered_data %>% pull(!!sym(y_var))
# Plot the data
plot(x, y, xlab = paste("log(", x_var, ")", sep = ""), ylab = y_var, main = paste(y_var, "vs", x_var))
# Perform correlation test
result <- cor.test(x, y, use = "complete.obs")
# Extract the correlation coefficient
correlation_coefficient <- result$estimate
# Calculate r-squared
r_squared <- correlation_coefficient^2
# Extract the p-value
p_value <- result$p.value
# Print the results
cat("Condition:", condition, "\n")
cat("Variable:", y_var, "\n")
cat("Correlation coefficient:", correlation_coefficient, "\n")
cat("R-squared:", r_squared, "\n")
cat("P-value:", p_value, "\n\n")
# Linear model and regression line
model <- lm(y ~ x)
abline(model, col = "red", lwd = 2)  # Red line with width of 2
text(x = min(x, na.rm = TRUE),
y = max(y, na.rm = TRUE),
labels = paste("r =", round(correlation_coefficient, 2), "R-squared:", round(r_squared, 2), "P-value:", round(p_value, 2)),
pos = 4,
col = "black")
}
# Loop over each variable and create a 2x2 grid of plots
for (y_var in variables_to_test) {
# Generate plot file name
plot_filename <- paste0("plots_2x2_", y_var, ".png")
# Save the 2x2 grid of plots
png(plot_filename, width = 800, height = 800)
par(mfrow = c(2, 2))  # Set up a 2x2 plotting area
for (condition_name in names(conditions)) {
condition <- conditions[[condition_name]]$filter
x_var <- conditions[[condition_name]]$x_var
calculate_and_plot_correlations(bphen, condition, x_var, y_var)
}
dev.off()
}
library(tidyverse)
################################
## load phenotype and batch data
################################
# make vectors of variables for later use as an input for function 'run_deseq2_DEG_analysis'
source.cell.log<-c(
"BAL_eos_ct_log",
"BAL_eos_p_log",
"BAL_neut_ct_log",
"BAL_neut_p_log",
"BAL_wbc_log",
"blood_eos_log",
"blood_eos_p_log",
"blood_neut_log",
"blood_neut_p_log",
"blood_wbc_log")
source.cell<-c(
"BAL_eos_ct",
"BAL_eos_p",
"BAL_neut_ct",
"BAL_neut_p",
"BAL_wbc",
"blood_eos",
"blood_eos_p",
"blood_neut",
"blood_neut_p",
"blood_wbc")
bphen_path<-file.path("./resources/processed_data/scaled_phenotype_studyID_asthmaPhenotype_batch_cellCount_20240731.csv")
bphen<-read.csv(bphen_path)
normalized_count_table_path<-"./resources/processed_data/bronch_batch12346_normalized_ct.txt"
counts<-if(file.exists(normalized_count_table_path)){read.delim(normalized_count_table_path, check.names = FALSE)}
bronch.counts<-counts
rownames(bronch.counts)<-bronch.counts$name
library(tidyverse)
################################
## load phenotype and batch data
################################
# make vectors of variables for later use as an input for function 'run_deseq2_DEG_analysis'
source.cell.log<-c(
"BAL_eos_ct_log",
"BAL_eos_p_log",
"BAL_neut_ct_log",
"BAL_neut_p_log",
"BAL_wbc_log",
"blood_eos_log",
"blood_eos_p_log",
"blood_neut_log",
"blood_neut_p_log",
"blood_wbc_log")
source.cell<-c(
"BAL_eos_ct",
"BAL_eos_p",
"BAL_neut_ct",
"BAL_neut_p",
"BAL_wbc",
"blood_eos",
"blood_eos_p",
"blood_neut",
"blood_neut_p",
"blood_wbc")
bphen_path<-file.path("./resources/processed_data/scaled_phenotype_studyID_asthmaPhenotype_batch_cellCount_20240731.csv")
bphen<-read.csv(bphen_path)
normalized_count_table_path<-"./resources/processed_data/bronch_batch12346_normalized_ct.txt"
counts<-if(file.exists(normalized_count_table_path)){read.delim(normalized_count_table_path, check.names = FALSE)}
bronch.counts<-counts
rownames(bronch.counts)<-bronch.counts$name
bronch.counts
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
d1<-"./reports/local_only/deg_bronch.bal_cell(continuous)+batch12346/gene_list_sig_results/deg_bronch_continuous_allcell+batch12346_res_sig_2_. BAL_eos_p_log + Batch_2024-08-02_.csv"
d2<-"./reports/local_only/deg_bronch.bal_cell(continuous)+batch12346/gene_list_sig_results/deg_bronch_continuous_allcell+batch12346_res_sig_5_. BAL_wbc_log + Batch_2024-08-02_.csv"
d3<-"./reports/local_only/deg_bronch.bal_cell(continuous)+batch12346/gene_list_sig_results/deg_bronch_continuous_poscell+batch12346_res_sig_3_. BAL_neut_ct_log + Batch_2024-05-29_.csv"
d4<-"./reports/local_only/deg_bronch.bal_cell(dichot)+batch12346/deg_bronch_dichot_res_sig_5_. bal_Eos_p_more_3 + Batch_2024-05-29_.csv"
d5<-"./reports/local_only/deg_bronch.bal_cell(dichot)+batch12346/deg_bronch_dichot_res_sig_14_. bld_AEC_more_300 + Batch_2024-05-29_.csv"
d6<-"./reports/local_only/deg_nasal-bronch.bal-blood_cell(continuous)+batch/deg_gene_list/deg_Nasal_poscells_. blood_eos_log + Batch_res_6_2024-01-09_.csv"
d7<-"./reports/local_only/deg_bronch.bal_cell(dichot)+batch12346/deg_bronch_dichot_res_sig_4_. bal_Eos_p_more_1 + Batch_2024-05-29_.csv"
d8<-"./reports/local_only/deg_bronch.bal_cell(dichot)+batch12346/deg_bronch_dichot_res_sig_2_. bal_AEC_more_1.15 + Batch_2024-05-29_.csv"
sapply(c(d1,d2,d3,d4,d5,d6,d7),file.exists)
d1<-read.csv(d1)
getwd()
# load TOM.dissimilarity if available
if(file.exists("./resources/processed_data/Rdata/wgcna_bronch_TOM_dissim_batch12346.Rdata")){
load("./resources/processed_data/Rdata/wgcna_bronch_TOM_dissim_batch12346.Rdata")
}
#creating the dendrogram
geneTree <- hclust(as.dist(TOM.dissimilarity), method = "average")
#plotting the dendrogram
sizeGrWindow(12,9)
