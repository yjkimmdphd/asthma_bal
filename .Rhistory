joinBatch<-function(p,b){
table<-left_join(p,b, by="SampleID")
table$Batch<-factor(table$Batch, levels=unique(table$Batch))
return(table)
}
nphen<-joinBatch(nphen,batch.info)
bphen<-joinBatch(bphen,batch.info)
nphen
nID<-paste0("N",phenotype$subjID) # N*** indicates bronchial sample ID, sequence data is not available for all as of 2023-10-04
bID<-paste0("B",phenotype$subjID) # B*** indicates bronchial sample ID, sequence data is not available for all as of 2023-10-04
nexist<-counts.ID%in%nID # find which subjects s/p nasal and had bronchial sample RNAseq completed. Nasal samples in batch 1-4 only sequenced to subjID 337
bexist<-counts.ID%in%bID # find which subjects s/p BAL and had bronchial sample RNAseq completed
nsample<-counts.ID[nexist] # nasal sample ID in the readcount matrix (batch 1-4) that has BAL phenotype data
bsample<-counts.ID[bexist] # bronchial sample ID in the readcount matrix (batch 1-4) that has BAL phenotype data
nphen<-phenotype[phenotype.scale$subjID%in%substring(nsample,2),] # phenotype table with nsample
bphen<-phenotype[phenotype.scale$subjID%in%substring(bsample,2),] # phenotype table with bsample
nphen<-mutate(nphen, SampleID=nsample)%>%relocate(SampleID, .before=1)
bphen<-mutate(bphen, SampleID=bsample)%>%relocate(SampleID, .before=1)
# left join batch info table with nasal/bronchial phenotype table
# get batch information
batch<-file.path("./resources/processed_data/asthma_nasal_bronchial_batch1234_info.txt")
batch.info<-if(file.exists(batch)){read.delim(batch)}
## define function joinBatch. p is phenotype table. b is batch info table. Factorize the batch info.
joinBatch<-function(p,b){
table<-left_join(p,b, by="SampleID")
table$Batch<-factor(table$Batch, levels=unique(table$Batch))
return(table)
}
nphen<-joinBatch(nphen,batch.info)
bphen<-joinBatch(bphen,batch.info)
nphen
nID<-paste0("N",phenotype$subjID) # N*** indicates bronchial sample ID, sequence data is not available for all as of 2023-10-04
bID<-paste0("B",phenotype$subjID) # B*** indicates bronchial sample ID, sequence data is not available for all as of 2023-10-04
nexist<-counts.ID%in%nID # find which subjects s/p nasal and had bronchial sample RNAseq completed. Nasal samples in batch 1-4 only sequenced to subjID 337
bexist<-counts.ID%in%bID # find which subjects s/p BAL and had bronchial sample RNAseq completed
nsample<-counts.ID[nexist] # nasal sample ID in the readcount matrix (batch 1-4) that has BAL phenotype data
bsample<-counts.ID[bexist] # bronchial sample ID in the readcount matrix (batch 1-4) that has BAL phenotype data
nphen<-phenotype.scale[phenotype$subjID%in%substring(nsample,2),] # phenotype table with nsample
bphen<-phenotype.scale[phenotype$subjID%in%substring(bsample,2),] # phenotype table with bsample
nphen<-mutate(nphen, SampleID=nsample)%>%relocate(SampleID, .before=1)
bphen<-mutate(bphen, SampleID=bsample)%>%relocate(SampleID, .before=1)
# left join batch info table with nasal/bronchial phenotype table
# get batch information
batch<-file.path("./resources/processed_data/asthma_nasal_bronchial_batch1234_info.txt")
batch.info<-if(file.exists(batch)){read.delim(batch)}
## define function joinBatch. p is phenotype table. b is batch info table. Factorize the batch info.
joinBatch<-function(p,b){
table<-left_join(p,b, by="SampleID")
table$Batch<-factor(table$Batch, levels=unique(table$Batch))
return(table)
}
nphen<-joinBatch(nphen,batch.info)
bphen<-joinBatch(bphen,batch.info)
nphen
deseq2DEG<-function(countdata,coldata,design,resultname){
print(paste("design",resultname, collapse = ":"))
dds<-DESeqDataSetFromMatrix(countData = countdata,colData=coldata, design=as.formula(design))
dds<-DESeq(dds)
print("resultnames")
print(resultsNames(dds))
return(dds)
}
# DEG with design "~  BAL_Eos_ct_log  + Batch"
dds1<-deseq2DEG(bcounts, bphen, deg.design[1],"BAL_Eos_ct_log")
res1<-degRes(dds1, source.cell.log[1])
res1
length(res1$padj<=0.05)
length(res1$padj<=0.05)
res1$padj<=0.05
sum(res1$padj<=0.05)
sum(res1$padj<=0.05,omit.na)
sum(res1$padj<=0.05,na.omit)
sum(res1$padj<=0.05,na.omit=TRUE)
?sum
sum(res1$padj<=0.05,na.rm=TRUE)
which(res1$padj<=0.05)
res1[which(res1$padj<=0.05),]
res1.sig<-res1[which(res1$padj<=0.05),]
exclude.bronch
deg.design
?degRes
degRes
# DEG with design "~  BAL_Eos_perc_log  + Batch"
dds2<-deseq2DEG(bcounts, bphen, deg.design[2],"BAL_Eos_perc_log")
res2<-degRes(dds2, source.cell.log[2])
res2.sig<-res1[which(res2$padj<=0.05),]
res2.sig
source.cell.log
filter(bphen,subjID!="BAL_neut_ct")
filter(bphen,subjID!="B332")
filter(bphen,SampleID!="B332")
# DEG with design "~  BAL_neut_ct_log10  + Batch"
dds3<-deseq2DEG(bcounts, filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
res3<-degRes(dds3, source.cell.log[3])
res3.sig<-res3[which(res3$padj<=0.05),]
# DEG with design "~  BAL_neut_ct_log10  + Batch"
dds3<-deseq2DEG(bcounts, filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
source.cell.log[3]
source.cell.log[3]
deg.design[3]
deseq2DEG(bcounts, filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
# DEG with design "~  BAL_neut_ct_log10  + Batch"
dds3<-deseq2DEG(filter(bcounts,SampleID!="B332"), filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
bcounts
# DEG with design "~  BAL_neut_ct_log10  + Batch"
dds3<-deseq2DEG(filter(bcounts[,-"B332"]), filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
# DEG with design "~  BAL_neut_ct_log10  + Batch"
dds3<-deseq2DEG(bcounts[,-"B332"], filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
bcounts[,-("B332")]
bcounts
bcounts[,-c("B332")]
select(bcounts,-"B332")
# DEG with design "~  BAL_neut_ct_log10  + Batch"
dds3<-deseq2DEG(select(bcounts,-"B332"), filter(bphen,SampleID!="B332"), deg.design[3],source.cell.log[3])
res3<-degRes(dds3, source.cell.log[3])
res3.sig<-res3[which(res3$padj<=0.05),]
res3.sig
# DEG with design "~  BAL_neut_perc_log  + Batch"
dds4<-deseq2DEG(select(bcounts,-"B332"), filter(bphen,SampleID!="B332"), deg.design[4],source.cell.log[4])
res4<-degRes(dds4, source.cell.log[4])
res4.sig<-res4[which(res4$padj<=0.05),]
res4.sig
exclude.bronch
deg.design[5]
dds5<-deseq2DEG(bcounts, bphen, deg.design[5],source.cell.log[5])
res5<-degRes(dds5, source.cell.log[5])
res5.sig<-res5[which(res5$padj<=0.05),]
res5.sig
exclude.bronch
# DEG with design "~  serum_Eos_log10  + Batch"
s.eos.ex<-filter(exclude.bronch,source.cell=="serum_Eos")
s.eos.ex
filter(exclude.bronch,source.cell=="serum_Eos")
# DEG with design "~  serum_Eos_log10  + Batch"
filter(exclude.bronch,source_cell=="serum_Eos")
# DEG with design "~  serum_Eos_log10  + Batch"
filter(exclude.bronch,source_cell=="serum_Eos")%>%select(SampleID)
# DEG with design "~  serum_Eos_log10  + Batch"
filter(exclude.bronch,source_cell=="serum_Eos")%>%select(SampleID)%>%unlist
# DEG with design "~  serum_Eos_log10  + Batch"
filter(exclude.bronch,source_cell=="serum_Eos")%>%select(SampleID)%>%as.character
# DEG with design "~  serum_Eos_log10  + Batch"
filter(exclude.bronch,source_cell=="serum_Eos")%>%select(SampleID)%>%unlist%>%as.character
# DEG with design "~  serum_Eos_log10  + Batch"
esc1<-filter(exclude.bronch,source_cell=="serum_Eos")%>%select(SampleID)%>%unlist%>%as.character
filter(bphen,SampleID!=esc1)
bphen[SampleID%in%esc1,]
bphen[SampleID%in%esc1,]
bphen[bphen$SampleID%in%esc1,]
bphen[-bphen$SampleID%in%esc1,]
bphen[!bphen$SampleID%in%esc1,]
bphen[!(bphen$SampleID%in%esc1),]
bphen$SampleID
esc1
!(bphen$SampleID%in%esc1)
bphen[!(bphen$SampleID%in%esc1),]
bphen[!(bphen$SampleID%in%esc1),]%>%sum
!(bphen$SampleID%in%esc1)%>%sum
!(bphen$SampleID%in%esc1)
sum(!(bphen$SampleID%in%esc1))
bphen[(!(bphen$SampleID%in%esc1)),]
k<-0!(bphen$SampleID%in%esc1)
k<-!(bphen$SampleID%in%esc1)
k
bphen[k, ]
bphen[k, ]%>%dim
bphen[!(bphen$SampleID%in%esc1),]%>%dim
select(bcounts,-esc1)%>%dim
select(bcounts,-all_of(esc1))
select(bcounts,-all_of(esc1))%>%dim
bcounts[k,]
bcounts[,k]
bcounts[,k]%>%dim
dds4<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[4],source.cell.log[4])
bcounts[,k]%>%is.na
sum(bcounts[,k]%>%is.na)
sum(bphen[k,]%>%is.na)
bphen[k,]
dim(bphen[k,])
bphen[is.na(bphen)%>%rowSums()>0,]
dds6<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[6],source.cell.log[6])
res6<-degRes(dds6, source.cell.log[6])
res6.sig<-res6[which(res6$padj<=0.05),]
res6.sig
dds7<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[7],source.cell.log[7])
res7<-degRes(dds7, source.cell.log[7])
res7.sig<-res7[which(res7$padj<=0.05),]
res7.sig
?paste
deseq2DEG<-function(countdata,coldata,design,resultname){
print(paste("design",resultname, collapse = ":"))
dds<-DESeqDataSetFromMatrix(countData = countdata,colData=coldata, design=as.formula(design))
dds<-DESeq(dds)
print("resultnames")
print(resultsNames(dds))
return(dds)
}
# DEG with design "~  serum_Neut_log10  + Batch"
esc2<-filter(exclude.bronch,source_cell=="serum_Neut")%>%select(SampleID)%>%unlist%>%as.character # samples to exclude due to absent source cell info
k<-!(bphen$SampleID%in%esc2)
k
dds8<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[8],source.cell.log[8])
res8<-degRes(dds8, source.cell.log[8])
res8.sig<-res8[which(res8$padj<=0.05),]
res8.sig
dds9<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[9],source.cell.log[9])
res9<-degRes(dds9, source.cell.log[9])
res9.sig<-res9[which(res9$padj<=0.05),]
res9.sig
# DEG with design "~  serum_WBC_log10  + Batch"
esc3<-filter(exclude.bronch,source_cell=="serum_WBC")%>%select(SampleID)%>%unlist%>%as.character # samples to exclude due to absent source cell info
k<-!(bphen$SampleID%in%esc3)
dds9<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[9],source.cell.log[9])
res9.sig<-res9[which(res9$padj<=0.05),]
dds10<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[10],source.cell.log[10])
dds10<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[10],source.cell[10])
deg.design[10]
source.cell.log[10]
esc3
k
sum(k)
deseq2DEG(bcounts[,k], bphen[k,], deg.design[10],source.cell.log[10])
bphen[k,]
exclude.bronch
# DEG with design "~  serum_WBC_log10  + Batch"
esc2<-filter(exclude.bronch,source_cell=="serum_Neut")%>%select(SampleID)%>%unlist%>%as.character # samples to exclude due to absent source cell info
k<-!(bphen$SampleID%in%esc2)
dds10<-deseq2DEG(bcounts[,k], bphen[k,], deg.design[10],source.cell.log[10])
res10<-degRes(dds10, source.cell.log[10])
res10.sig<-res10[which(res10$padj<=0.05),]
res10.sig
exclude.bronch<-data.frame(source_cell=c("BAL_neut_ct","BAL_neut_perc",rep(c("serum_Eos","serum_Eos_perc","serum_Neut", "serum_Neut_perc","serum_WBC"),each=6)),
SampleID=c("B332","B332",bphen.na$SampleID[1:6]%>%rep(5)))
exclude.bronch
bphen.na
# DEG with design "~  serum_WBC_log10  + Batch"
esc3<-filter(exclude.bronch,source_cell=="serum_WBC")%>%select(SampleID)%>%unlist%>%as.character # samples to exclude due to absent source cell info
esc3
k<-!(bphen$SampleID%in%esc3)
getwd()
write.csv(exclude.bronch,"./resource/processed_data/bronch_samples_excluded.csv")
write.csv(exclude.bronch,"./resources/processed_data/bronch_samples_excluded.csv")
?write.csv
write.csv(exclude.bronch,"./resources/processed_data/bronch_samples_excluded.csv",row.names = FALSE)
write.csv(exclude.bronch,"./resources/processed_data/bronch_samples_excluded.csv",row.names = FALSE)
# samples to exclude in certain analysis due to absent cell count values
exclude.bronch<-read.csv("./resources/processed_data/bronch_samples_excluded.csv")
exclude.bronch
#########################
# cleaning up patient phenotype data table for bronchial_BAL_rnaseq.R
#########################
library(limma)
library(edgeR)
library(dplyr)
## filter method 2: use TMM normalized lcpm as a cutoff point
###
cpm0 <-cpm(bcounts)
lcpm0<-cpm(bcounts,log=TRUE)
L<-mean(colSums(x))*1e-6 # mean library size
### x will be the TMM normalized count
x<-bcounts
###
cpm0 <-cpm(x)
lcpm0<-cpm(x,log=TRUE)
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
### normalize counts with TMM
norm.factor<-calcNormFactors(x, method = "TMM")
sample.size<-length(colnames(x))
for(i in 1:sample.size){
x[,i]<-x[,i]/norm.factor[i]
}
### calculate lcpm based on TMM normalized counts
lcpm.x<-cpm(x,log=TRUE)
### setting a lcpm cutoff for filtering genes with very low counts
lcpm.cutoff <- log2(10/M + 2/L)
dropCutoff<-function(cutoff,lcpm){
which(apply(lcpm, 1, max) < cutoff)
}
drop <-dropCutoff(lcpm.cutoff,lcpm.x)
drop
be the TMM normalized count
x<-bcounts
###
cpm0 <-cpm(x)
lcpm0<-cpm(x,log=TRUE)
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
x
# select just the bronchial RNAseq counts
b<-counts.ID%in%bID
bcols<-colnames(counts)[b]
bcounts<-counts[,bcols] # First column is actually gene name
genes<-counts$SampleID
rownames(bcounts)<-genes
## filter method 2: use TMM normalized lcpm as a cutoff point
### x will be the TMM normalized count
x<-bcounts
x
dim(bcounts)
###
cpm0 <-cpm(x)
lcpm0<-cpm(x,log=TRUE)
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
### normalize counts with TMM
norm.factor<-calcNormFactors(x, method = "TMM")
sample.size<-length(colnames(x))
for(i in 1:sample.size){
x[,i]<-x[,i]/norm.factor[i]
}
### calculate lcpm based on TMM normalized counts
lcpm.x<-cpm(x,log=TRUE)
### setting a lcpm cutoff for filtering genes with very low counts
lcpm.cutoff <- log2(10/M + 2/L)
dropCutoff<-function(cutoff,lcpm){
which(apply(lcpm, 1, max) < cutoff)
}
drop <-dropCutoff(lcpm.cutoff,lcpm.x)
drop
dim(drop)
length(drop)
apply(lcpm.x,1,max)
apply(lcpm.x,1,max)<lcpm.cutoff
rowSums(apply(lcpm.x,1,max)<lcpm.cutoff)
head(lcpm.x)
lcpm.x<lcpm.cutoff
lcpm.x<lcpm.cutoff%>%rowSums()
lcpm.x<lcpm.cutoff%>%rowSums
rowSums(lcpm.x<lcpm.cutoff)
rowSums(lcpm.x<lcpm.cutoff)>4
dropCutoff<-function(cutoff,lcpm){
dg<-which(rowSums(lcpm<cutoff)>4) # which genes have normalized lcpm less than the cutoff in >10% of the samples
return(dg)
}
dropCutoff<-function(cutoff,lcpm){
dg<-which(rowSums(lcpm<cutoff)>4) # which genes have normalized lcpm less than the cutoff in >10% of the samples
return(dg)
}
drop <-dropCutoff(lcpm.cutoff,lcpm.x)
x<-x[-drop,]
x
x%>%dim
drop
length(drop)
length(drop)
lcpm
lcpm.cutoff
exp(lcpm.cutoff)
cpm0 <-cpm(bcounts)
drop.genes<-which(rowSums(cpm0<=2)>4)
length(drop.genes)
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
return(x)
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
dim(bcounts)
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
return(x)
return(drop.genes)
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
bcounts
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
return(list(x, drop.genes))
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
bcounts
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
return(list(x, drop.genes))
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
l<-list(x, drop.genes)
return(l)
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
print(paste("# of dropped genes:",length(drop.genes)))
return(x)
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
b<-counts.ID%in%bID
bcols<-colnames(counts)[b]
bcounts<-counts[,bcols] # First column is actually gene name
genes<-counts$SampleID
rownames(bcounts)<-genes
# Filter bcounts (readcount table for bronchial sample
## filter method 1:
### Remove genes with ≤ 5 counts per million in >10% of samples (>4 samples) were removed to reduce noise on low counts and low abundance genes (PMID: 37730635)
lowReadFilter1<-function(readcounts, cutoff, n_sample){
x<-readcounts
cpm0 <-cpm(readcounts)
drop.genes<-which(rowSums(cpm0<=cutoff)>n_sample)
x<-x[-drop.genes,]
print(paste("# of dropped genes:",length(drop.genes)))
return(x)
}
bcounts<-lowReadFilter1(bcounts, 2, 4)
bcounts
## filter method 2: use TMM normalized lcpm as a cutoff point
### x will be the TMM normalized count
lowReadFilter2<-function(readcounts, n_sample){
x<-readcounts
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
lcpm.cutoff <- log2(10/M + 2/L) # lcpm cutoff for filtering genes with very low counts
### normalize counts with TMM
norm.factor<-calcNormFactors(x, method = "TMM")
sample.size<-length(colnames(x))
for(i in 1:sample.size){
x[,i]<-x[,i]/norm.factor[i]
}
### calculate lcpm based on TMM normalized counts
lcpm.x<-cpm(x,log=TRUE)
drop.genes<-which(rowSums(lcpm.x<lcpm.cutoff)>n_sample) # which genes have normalized lcpm less than the cutoff in >10% of the samples
print(paste("# of dropped genes:",length(drop.genes))) # number of dropped genes
x<-x[-drop,] # readcounts retained
}
## filter method 2: use TMM normalized lcpm as a cutoff point
### x will be the TMM normalized count
lowReadFilter2<-function(readcounts, n_sample){
x<-readcounts
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
lcpm.cutoff <- log2(10/M + 2/L) # lcpm cutoff for filtering genes with very low counts
### normalize counts with TMM
norm.factor<-calcNormFactors(x, method = "TMM")
sample.size<-length(colnames(x))
for(i in 1:sample.size){
x[,i]<-x[,i]/norm.factor[i]
}
### calculate lcpm based on TMM normalized counts
lcpm.x<-cpm(x,log=TRUE)
drop.genes<-which(rowSums(lcpm.x<lcpm.cutoff)>n_sample) # which genes have normalized lcpm less than the cutoff in >10% of the samples
x<-x[-drop.genes,] # readcounts retained
print(paste("# of dropped genes:",length(drop.genes))) # number of dropped genes
return(x)
}
lowReadFilter2(bcounts,4)
## filter method 2: use TMM normalized lcpm as a cutoff point
### x will be the TMM normalized count
lowReadFilter2<-function(readcounts, n_sample){
x<-readcounts
L<-mean(colSums(x))*1e-6 # mean library size
M<-median(colSums(x))*1e-6 # median library size
lcpm.cutoff <- log2(10/M + 2/L) # lcpm cutoff for filtering genes with very low counts
### normalize counts with TMM
norm.factor<-calcNormFactors(x, method = "TMM")
sample.size<-length(colnames(x))
for(i in 1:sample.size){
x[,i]<-x[,i]/norm.factor[i]
}
### calculate lcpm based on TMM normalized counts
lcpm.x<-cpm(x,log=TRUE)
drop.genes<-which(rowSums(lcpm.x<lcpm.cutoff)>n_sample) # which genes have normalized lcpm less than the cutoff in >10% of the samples
x<-x[-drop.genes,] # readcounts retained
print(paste("# of dropped genes:",length(drop.genes))) # number of dropped genes
return(x)
}
lowReadFilter2(bcounts,4)
b<-counts.ID%in%bID
bcols<-colnames(counts)[b]
bcounts<-counts[,bcols] # First column is actually gene name
genes<-counts$SampleID
rownames(bcounts)<-genes
lowReadFilter2(bcounts,4)
bc<-lowReadFilter1(bcounts, 2, 4)
bc1<-lowReadFilter1(bcounts, 2, 4)
bc2<-lowReadFilter2(bcounts,4)
